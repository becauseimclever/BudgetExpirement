// <auto-generated />
using System;
using BudgetExperiment.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetExperiment.Infrastructure.Migrations
{
    [DbContext(typeof(BudgetDbContext))]
    [Migration("20250919020749_RemoveObsoleteEntities")]
    partial class RemoveObsoleteEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetExperiment.Domain.AdhocTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("TransactionType");

                    b.ToTable("AdhocTransactions");
                });

            modelBuilder.Entity("BudgetExperiment.Domain.RecurringSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Anchor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DaysInterval")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Recurrence")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Anchor");

                    b.HasIndex("ScheduleType");

                    b.ToTable("RecurringSchedules");
                });

            modelBuilder.Entity("BudgetExperiment.Domain.AdhocTransaction", b =>
                {
                    b.OwnsOne("BudgetExperiment.Domain.MoneyValue", "Money", b1 =>
                        {
                            b1.Property<Guid>("AdhocTransactionId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("MoneyValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("MoneyCurrency");

                            b1.HasKey("AdhocTransactionId");

                            b1.ToTable("AdhocTransactions");

                            b1.WithOwner()
                                .HasForeignKey("AdhocTransactionId");
                        });

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetExperiment.Domain.RecurringSchedule", b =>
                {
                    b.OwnsOne("BudgetExperiment.Domain.MoneyValue", "Amount", b1 =>
                        {
                            b1.Property<Guid>("RecurringScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("AmountValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("AmountCurrency");

                            b1.HasKey("RecurringScheduleId");

                            b1.ToTable("RecurringSchedules");

                            b1.WithOwner()
                                .HasForeignKey("RecurringScheduleId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
