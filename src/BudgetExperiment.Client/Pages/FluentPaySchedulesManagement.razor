@page "/fluent-pay-schedules"
@inject HttpClient Http
@inject IJSRuntime JS
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Pay Schedules Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="padding: 24px; max-width: 1400px; margin: 0 auto;">
    <!-- Header -->
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" Style="margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
        <FluentLabel Typo="Typography.PageTitle" Style="color: var(--neutral-foreground-primary); font-weight: 600;">
            Pay Schedules Management
        </FluentLabel>
        <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary);">
            Manage recurring income and payment schedules
        </FluentLabel>
    </FluentStack>

    @if (isLoading)
    {
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Style="padding: 48px;">
            <FluentProgressRing />
            <FluentLabel Typo="Typography.Body" Style="margin-left: 12px; color: var(--neutral-foreground-secondary);">
                Loading pay schedules...
            </FluentLabel>
        </FluentStack>
    }
    else
    {
        <FluentCard Style="width: 100%; overflow: hidden;">
            <!-- Action Bar -->
            <FluentStack Orientation="Orientation.Horizontal" 
                         HorizontalAlignment="HorizontalAlignment.SpaceBetween" 
                         VerticalAlignment="VerticalAlignment.Center" 
                         Style="padding: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
                <FluentLabel Typo="Typography.H6">
                    Pay Schedules (@paySchedules.Count)
                </FluentLabel>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="OpenAddDialog"
                              Style="margin-left: auto;">
                    ‚ûï Add New Pay Schedule
                </FluentButton>
            </FluentStack>

            <!-- Pay Schedules Data Grid -->
            <FluentDataGrid Items="@paySchedules.AsQueryable()" Style="width: 100%;">
                <PropertyColumn Property="@(c => GetScheduleDisplayName(c))" Title="Schedule" Sortable="true" />
                <PropertyColumn Property="@(c => $"{c.Currency} {c.Amount:F2}")" Title="Amount" Sortable="true" />
                <PropertyColumn Property="@(c => c.Anchor)" Title="Anchor Date" Format="yyyy-MM-dd" Sortable="true" />
                <PropertyColumn Property="@(c => GetRecurrenceTypeDisplay(c.Recurrence))" Title="Recurrence" Sortable="true" />
                <PropertyColumn Property="@(c => GetNextDueDate(c))" Title="Next Due" Format="MMM dd, yyyy" Sortable="true" />
                <TemplateColumn Title="Actions">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                        <FluentButton Appearance="Appearance.Outline" 
                                      OnClick="() => OpenEditDialog(context)"
                                      Title="Edit pay schedule"
                                      Style="padding: 4px 8px;">
                            ‚úèÔ∏è
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Outline" 
                                      OnClick="() => OpenDeleteDialog(context)"
                                      Title="Delete pay schedule"
                                      Style="padding: 4px 8px; color: var(--palette-red-foreground-1); border-color: var(--palette-red-border-1);">
                            üóëÔ∏è
                        </FluentButton>
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
        </FluentCard>

        @if (!paySchedules.Any())
        {
            <FluentCard Style="margin-top: 24px; text-align: center; padding: 48px;">
                <div style="font-size: 48px; margin-bottom: 16px;">üí∞</div>
                <FluentLabel Typo="Typography.H5" Style="margin-bottom: 8px;">
                    No pay schedules yet
                </FluentLabel>
                <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary); margin-bottom: 24px;">
                    Set up recurring income and payment schedules to track your regular cash flow.
                </FluentLabel>
                <FluentButton Appearance="Appearance.Accent" OnClick="OpenAddDialog">
                    Add Your First Pay Schedule
                </FluentButton>
            </FluentCard>
        }
    }
</FluentStack>

<!-- Add/Edit Pay Schedule Dialog -->
<ScheduleItemDialog IsVisible="@showDialog"
                   Title="@(dialogModel.IsEditMode ? "Edit Pay Schedule" : "Add New Pay Schedule")"
                   NameLabel=""
                   NamePlaceholder=""
                   ShowNameField="false"
                   RecurrenceOptions="@recurrenceOptions"
                   Model="@dialogModel"
                   OnSave="SavePaySchedule"
                   OnDelete="DeletePaySchedule"
                   OnCancel="CloseDialog" />

<!-- Delete Confirmation Dialog -->
<FluentDialog Hidden="@(!showDeleteDialog)" 
              Modal="true" 
              TrapFocus="true"
              PreventScroll="true"
              Style="min-width: 400px;">
    <div style="padding: 24px;">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
            <FluentLabel Typo="Typography.H5" Style="color: var(--palette-red-foreground-1);">
                ‚ö†Ô∏è Delete Pay Schedule
            </FluentLabel>
            
            <FluentLabel Typo="Typography.Body">
                Are you sure you want to delete this pay schedule? This action cannot be undone.
            </FluentLabel>
            
            @if (payScheduleToDelete != null)
            {
                <FluentCard Style="background: var(--neutral-fill-tertiary); padding: 16px; border-left: 4px solid var(--palette-red-border-1);">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        <FluentLabel Style="font-weight: 600;">
                            @GetScheduleDisplayName(payScheduleToDelete)
                        </FluentLabel>
                        <FluentLabel Typo="Typography.Body" Style="font-size: 12px;">
                            @($"{payScheduleToDelete.Currency} {payScheduleToDelete.Amount:F2}") ‚Ä¢ @GetRecurrenceDisplay(payScheduleToDelete.Recurrence, payScheduleToDelete.DaysInterval)
                        </FluentLabel>
                    </FluentStack>
                </FluentCard>
            }
            
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" HorizontalGap="8">
                <FluentButton Appearance="Appearance.Neutral" 
                              OnClick="() => showDeleteDialog = false"
                              Disabled="@isDeleting">
                    Cancel
                </FluentButton>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="ConfirmDelete"
                              Disabled="@isDeleting"
                              Style="background: var(--palette-red-fill-1); border-color: var(--palette-red-border-1);">
                    @if (isDeleting)
                    {
                        <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                    }
                    Delete Pay Schedule
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </div>
</FluentDialog>

@code {
    private List<PayScheduleItem> paySchedules = new();
    private bool isLoading = true;
    private bool showDialog = false;
    private bool showDeleteDialog = false;
    private bool isDeleting = false;
    private PayScheduleItem? payScheduleToDelete = null;
    private ScheduleItemDialog.ScheduleItemDialogModel dialogModel = new();
    
    // Unified recurrence options that both pay schedules and bills can use
    private readonly List<string> recurrenceOptions = new()
    {
        "Weekly", "BiWeekly", "Monthly", "Quarterly", "SemiAnnual", "Annual"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPaySchedules();
    }

    private async Task LoadPaySchedules()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetFromJsonAsync<PagedResult<PayScheduleItem>>("api/v1/payschedules?page=1&pageSize=100");
            paySchedules = response?.Items ?? new List<PayScheduleItem>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pay schedules: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenAddDialog()
    {
        dialogModel = new ScheduleItemDialog.ScheduleItemDialogModel
        {
            IsEditMode = false,
            Amount = 0,
            Currency = "USD",
            Recurrence = "BiWeekly",
            DaysInterval = 14,
            DateTime = DateTime.Today
        };
        showDialog = true;
        StateHasChanged();
    }

    private void OpenEditDialog(PayScheduleItem paySchedule)
    {
        dialogModel = new ScheduleItemDialog.ScheduleItemDialogModel
        {
            IsEditMode = true,
            Id = paySchedule.Id,
            Name = string.Empty, // Pay schedules don't have names
            Amount = paySchedule.Amount,
            Currency = paySchedule.Currency,
            Recurrence = GetRecurrenceTypeDisplay(paySchedule.Recurrence),
            DaysInterval = paySchedule.DaysInterval,
            DateTime = paySchedule.Anchor.ToDateTime(TimeOnly.MinValue)
        };
        showDialog = true;
        StateHasChanged();
    }

    private void OpenDeleteDialog(PayScheduleItem paySchedule)
    {
        payScheduleToDelete = paySchedule;
        showDeleteDialog = true;
        StateHasChanged();
    }

    private async Task SavePaySchedule()
    {
        if (!dialogModel.Validate(requireName: false))
        {
            StateHasChanged();
            return;
        }

        dialogModel.IsSaving = true;
        StateHasChanged();

        try
        {
            if (dialogModel.IsEditMode && dialogModel.Id.HasValue)
            {
                // TODO: Implement pay schedule update API
                Console.WriteLine($"Would update pay schedule: {dialogModel.Id.Value}");
                await Task.Delay(100); // Temporary placeholder
            }
            else
            {
                // TODO: Implement pay schedule create API
                Console.WriteLine($"Would create new pay schedule: {dialogModel.Amount} {dialogModel.Currency}");
                await Task.Delay(100); // Temporary placeholder
            }

            CloseDialog();
            await LoadPaySchedules();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving pay schedule: {ex.Message}");
        }
        finally
        {
            dialogModel.IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeletePaySchedule()
    {
        if (!dialogModel.IsEditMode || !dialogModel.Id.HasValue)
        {
            return;
        }

        dialogModel.IsDeleting = true;
        StateHasChanged();

        try
        {
            // TODO: Implement pay schedule delete API
            Console.WriteLine($"Would delete pay schedule: {dialogModel.Id.Value}");
            await Task.Delay(100); // Temporary placeholder
            
            CloseDialog();
            await LoadPaySchedules();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting pay schedule: {ex.Message}");
        }
        finally
        {
            dialogModel.IsDeleting = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        if (payScheduleToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            // TODO: Implement pay schedule delete API
            Console.WriteLine($"Would delete pay schedule: {payScheduleToDelete.Id}");
            await Task.Delay(1000); // Simulate API call
            
            showDeleteDialog = false;
            payScheduleToDelete = null;
            await LoadPaySchedules();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting pay schedule: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
        dialogModel = new ScheduleItemDialog.ScheduleItemDialogModel();
        StateHasChanged();
    }

    private string GetScheduleDisplayName(PayScheduleItem schedule)
    {
        return $"{schedule.Currency} {schedule.Amount:F2} {GetRecurrenceTypeDisplay(schedule.Recurrence)}";
    }

    private string GetRecurrenceTypeDisplay(PayScheduleRecurrence recurrence)
    {
        return recurrence switch
        {
            PayScheduleRecurrence.Weekly => "Weekly", 
            PayScheduleRecurrence.BiWeekly => "BiWeekly",
            PayScheduleRecurrence.Monthly => "Monthly",
            PayScheduleRecurrence.Custom => "Custom",
            _ => recurrence.ToString()
        };
    }

    private string GetRecurrenceDisplay(PayScheduleRecurrence recurrence, int? daysInterval)
    {
        var baseText = GetRecurrenceTypeDisplay(recurrence);
        return daysInterval.HasValue && daysInterval > 0 ? $"{baseText} (every {daysInterval} days)" : baseText;
    }

    private DateTime? GetNextDueDate(PayScheduleItem schedule)
    {
        // Simple calculation for next due date based on anchor and recurrence
        var today = DateTime.Today;
        var anchor = schedule.Anchor.ToDateTime(TimeOnly.MinValue);
        
        if (anchor > today)
        {
            return anchor;
        }

        var daysSinceAnchor = (today - anchor).Days;
        var interval = schedule.DaysInterval ?? GetDefaultIntervalForRecurrence(schedule.Recurrence);
        
        if (interval <= 0) return null;
        
        var cyclesPassed = daysSinceAnchor / interval;
        var nextDue = anchor.AddDays((cyclesPassed + 1) * interval);
        
        return nextDue;
    }

    private int GetDefaultIntervalForRecurrence(PayScheduleRecurrence recurrence)
    {
        return recurrence switch
        {
            PayScheduleRecurrence.Weekly => 7,
            PayScheduleRecurrence.BiWeekly => 14,
            PayScheduleRecurrence.Monthly => 30,
            PayScheduleRecurrence.Custom => 30, // Default fallback
            _ => 30
        };
    }

    public class PagedResult<T>
    {
        public List<T> Items { get; set; } = new();
        public int TotalCount { get; set; }
        public int PageSize { get; set; }
        public int Page { get; set; }
    }

    // DTO that matches the actual API response structure
    private sealed record PayScheduleItem(
        Guid Id,
        DateOnly Anchor,
        PayScheduleRecurrence Recurrence,
        string Currency,
        decimal Amount,
        int? DaysInterval,
        DateTime CreatedUtc,
        DateTime? UpdatedUtc);

    public enum PayScheduleRecurrence
    {
        Weekly = 0,
        Monthly = 1, 
        BiWeekly = 2,
        Custom = 3
    }
}
