@page "/"
@page "/fluentcalendar"
@inject IJSRuntime JS
@inject CalendarDataService DataService
@using Microsoft.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Components
@using BudgetExperiment.Client.Components.Calendar
@using BudgetExperiment.Client.Api
@using BudgetExperiment.Client.Models
@using BudgetExperiment.Client.Services
@using BudgetExperiment.Domain

<PageTitle>Budget Calendar</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="height: 100vh; background-color: var(--neutral-layer-1);">
    <!-- Combined Calendar Card -->
    <FluentCard Style="margin: 16px; flex: 1; overflow: hidden;">
        <!-- Calendar Header -->
        <CalendarHeader MonthName="@currentMonth.MonthName" 
                        Year="@currentMonth.Year"
                        OnNavigateMonth="NavigateMonth" />

        <!-- Calendar Grid -->
        <CalendarGrid CurrentMonth="@currentMonth"
                      CurrentMonthKey="@currentMonthKey"
                      DataService="@DataService"
                      OnDayClick="OpenDayDetailsDialog"
                      OnEditSchedule="OpenRecurringScheduleDialog"
                      OnEditTransaction="OpenAdhocTransactionDialog" />
    </FluentCard>
</FluentStack>

<!-- Edit Adhoc Transaction Dialog -->
<FinancialItemDialog IsVisible="@showAdhocTransactionDialog"
                     Title="@(adhocTransactionDialogModel.IsEditMode ? "Edit Transaction" : "Add New Transaction")"
                     NameLabel="Description"
                     NamePlaceholder="Enter transaction description..."
                     DateLabel="Transaction Date"
                     SaveButtonText="@(adhocTransactionDialogModel.IsEditMode ? "Update Transaction" : "Add Transaction")"
                     ShowCategoryField="true"
                     ShowRecurrenceField="false"
                     ShowTransactionTypeField="true"
                     Model="@adhocTransactionDialogModel"
                     OnCancel="CloseAdhocTransactionDialog"
                     OnSave="SaveAdhocTransactionDialog"
                     OnDelete="DeleteAdhocTransaction" />

<!-- Edit Recurring Schedule Dialog -->
<UnifiedScheduleDialog IsVisible="@showRecurringScheduleDialog"
                       Title="@(recurringScheduleDialogModel.IsEditMode ? "Edit Recurring Schedule" : "Add New Recurring Schedule")"
                       Model="@recurringScheduleDialogModel"
                       OnCancel="CloseRecurringScheduleDialog"
                       OnSave="SaveRecurringScheduleDialog"
                       OnDelete="DeleteRecurringSchedule" />

<!-- Day Details Dialog -->
<UnifiedDayDetailsDialog IsVisible="@showDayDetailsDialog"
                         Title="@GetDayDetailsTitle()"
                         SelectedDate="@selectedDayForDetails"
                         RecurringSchedules="@GetRecurringSchedulesForDay(selectedDayForDetails)"
                         AdhocTransactions="@GetAdhocTransactionsForDay(selectedDayForDetails)"
                         OnClose="CloseDayDetailsDialog"
                         OnAddIncomeSchedule="() => AddNewIncomeScheduleForDay(selectedDayForDetails)"
                         OnAddExpenseSchedule="() => AddNewExpenseScheduleForDay(selectedDayForDetails)"
                         OnAddIncomeTransaction="() => AddNewIncomeTransactionForDay(selectedDayForDetails)"
                         OnAddExpenseTransaction="() => AddNewExpenseTransactionForDay(selectedDayForDetails)"
                         OnEditRecurringSchedule="EventCallback.Factory.Create<RecurringScheduleItem>(this, HandleEditRecurringScheduleFromDay)"
                         OnEditAdhocTransaction="EventCallback.Factory.Create<AdhocTransactionItem>(this, HandleEditAdhocTransactionFromDay)" />

@code {
    private CalendarMonth currentMonth = new();
    private string currentMonthKey = string.Empty;

    // Dialog state for editing calendar items
    private bool showAdhocTransactionDialog = false;
    private FinancialItemDialog.FinancialItemDialogModel adhocTransactionDialogModel = new();

    private bool showRecurringScheduleDialog = false;
    private UnifiedScheduleDialog.UnifiedScheduleDialogModel recurringScheduleDialogModel = new();
    
    // Day details dialog state
    private bool showDayDetailsDialog = false;
    private DateOnly selectedDayForDetails = DateOnly.MinValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMonth();
    }

    private async Task LoadCurrentMonth()
    {
        var now = DateTime.Now;
        currentMonth = CalendarMonth.Build(now.Year, now.Month);
        currentMonthKey = $"{now.Year:D4}-{now.Month:D2}";
        
        await DataService.LoadRecurringSchedulesAsync();
        await DataService.CacheRecurringScheduleOccurrencesAsync(now.Year, now.Month);
        await DataService.CacheAdhocTransactionsAsync(now.Year, now.Month);
        await DataService.CalculateRunningTotalsAsync(now.Year, now.Month);
        StateHasChanged();
    }

    private async Task NavigateMonth(int direction)
    {
        var currentDate = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var newDate = currentDate.AddMonths(direction);
        
        currentMonth = CalendarMonth.Build(newDate.Year, newDate.Month);
        currentMonthKey = $"{newDate.Year:D4}-{newDate.Month:D2}";
        
        await DataService.CacheRecurringScheduleOccurrencesAsync(newDate.Year, newDate.Month);
        await DataService.CacheAdhocTransactionsAsync(newDate.Year, newDate.Month);
        await DataService.CalculateRunningTotalsAsync(newDate.Year, newDate.Month);
        StateHasChanged();
    }

    private List<RecurringScheduleItem> GetRecurringSchedulesForDay(DateOnly day)
    {
        return DataService.GetRecurringSchedulesForDay(day, currentMonthKey);
    }

    private List<AdhocTransactionItem> GetAdhocTransactionsForDay(DateOnly day)
    {
        return DataService.GetAdhocTransactionsForDay(day, currentMonthKey);
    }

    // Dialog methods for editing calendar items
    
    private void OpenRecurringScheduleDialog(RecurringScheduleItem schedule)
    {
        recurringScheduleDialogModel = new UnifiedScheduleDialog.UnifiedScheduleDialogModel
        {
            Id = schedule.Id,
            ScheduleType = schedule.ScheduleType,
            Name = schedule.Name ?? string.Empty,
            Amount = schedule.DisplayAmount,
            DateTime = schedule.Anchor.ToDateTime(TimeOnly.MinValue),
            Recurrence = schedule.Recurrence,
            DaysInterval = schedule.DaysInterval,
            IsEditMode = true
        };
        showRecurringScheduleDialog = true;
        StateHasChanged();
    }

    private void OpenAdhocTransactionDialog(AdhocTransactionItem transaction)
    {
        adhocTransactionDialogModel = new FinancialItemDialog.FinancialItemDialogModel
        {
            Id = transaction.Id,
            Name = transaction.Description,
            Currency = transaction.Currency,
            Amount = transaction.DisplayAmount,
            DateTime = transaction.Date.ToDateTime(TimeOnly.MinValue),
            Category = transaction.Category,
            IsEditMode = true,
            TransactionType = transaction.TransactionType
        };
        showAdhocTransactionDialog = true;
        StateHasChanged();
    }
    
    private void CloseAdhocTransactionDialog()
    {
        showAdhocTransactionDialog = false;
        adhocTransactionDialogModel = new FinancialItemDialog.FinancialItemDialogModel();
        StateHasChanged();
    }
    
    private async Task SaveAdhocTransactionDialog()
    {
        if (!adhocTransactionDialogModel.Validate(requireName: true))
        {
            StateHasChanged();
            return;
        }

        adhocTransactionDialogModel.IsSaving = true;
        StateHasChanged();

        try
        {
            var success = false;
            
            if (adhocTransactionDialogModel.IsEditMode && adhocTransactionDialogModel.Id.HasValue)
            {
                success = await UpdateAdhocTransactionAsync();
            }
            else
            {
                success = await CreateAdhocTransactionAsync();
            }

            if (success)
            {
                await RefreshCalendarDataAsync();
                CloseAdhocTransactionDialog();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving adhoc transaction: {ex.Message}");
        }
        finally
        {
            adhocTransactionDialogModel.IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task<bool> UpdateAdhocTransactionAsync()
    {
        if (!adhocTransactionDialogModel.Id.HasValue)
        {
            return false;
        }

        var updateRequest = new
        {
            Description = adhocTransactionDialogModel.Name!.Trim(),
            Currency = adhocTransactionDialogModel.Currency,
            Amount = adhocTransactionDialogModel.Amount!.Value,
            Date = DateOnly.FromDateTime(adhocTransactionDialogModel.DateTime),
            Category = string.IsNullOrWhiteSpace(adhocTransactionDialogModel.Category) ? null : adhocTransactionDialogModel.Category.Trim()
        };

        var response = await DataService.HttpClient.PutAsJsonAsync($"api/v1/adhoc-transactions/{adhocTransactionDialogModel.Id.Value}", updateRequest);
        
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to update adhoc transaction: {response.StatusCode}");
        }
        
        return response.IsSuccessStatusCode;
    }

    private async Task<bool> CreateAdhocTransactionAsync()
    {
        var createRequest = new
        {
            Description = adhocTransactionDialogModel.Name!.Trim(),
            Currency = adhocTransactionDialogModel.Currency,
            Amount = adhocTransactionDialogModel.Amount!.Value,
            Date = DateOnly.FromDateTime(adhocTransactionDialogModel.DateTime),
            Category = string.IsNullOrWhiteSpace(adhocTransactionDialogModel.Category) ? null : adhocTransactionDialogModel.Category.Trim()
        };

        var endpoint = adhocTransactionDialogModel.TransactionType == TransactionType.Income 
            ? "api/v1/adhoc-transactions/income" 
            : "api/v1/adhoc-transactions/expenses";

        var response = await DataService.HttpClient.PostAsJsonAsync(endpoint, createRequest);
        
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to create adhoc transaction: {response.StatusCode}");
        }
        
        return response.IsSuccessStatusCode;
    }
    
    private async Task DeleteAdhocTransaction()
    {
        if (!adhocTransactionDialogModel.IsEditMode || !adhocTransactionDialogModel.Id.HasValue)
        {
            return;
        }

        adhocTransactionDialogModel.IsDeleting = true;
        StateHasChanged();

        try
        {
            var response = await DataService.HttpClient.DeleteAsync($"api/v1/adhoc-transactions/{adhocTransactionDialogModel.Id.Value}");
            
            if (response.IsSuccessStatusCode)
            {
                await RefreshCalendarDataAsync();
                CloseAdhocTransactionDialog();
            }
            else
            {
                Console.WriteLine($"Failed to delete adhoc transaction: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting adhoc transaction: {ex.Message}");
        }
        finally
        {
            adhocTransactionDialogModel.IsDeleting = false;
            StateHasChanged();
        }
    }

    // Dialog close and save methods for recurring schedules
    private void CloseRecurringScheduleDialog()
    {
        showRecurringScheduleDialog = false;
        recurringScheduleDialogModel = new UnifiedScheduleDialog.UnifiedScheduleDialogModel();
        StateHasChanged();
    }

    private async Task SaveRecurringScheduleDialog()
    {
        if (!recurringScheduleDialogModel.Validate())
        {
            StateHasChanged();
            return;
        }

        recurringScheduleDialogModel.IsSaving = true;
        StateHasChanged();

        try
        {
            var success = false;
            
            if (recurringScheduleDialogModel.IsEditMode && recurringScheduleDialogModel.Id.HasValue)
            {
                success = await UpdateRecurringScheduleAsync();
            }
            else
            {
                success = await CreateRecurringScheduleAsync();
            }

            if (success)
            {
                await RefreshSchedulesAndCloseDialog();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving recurring schedule: {ex.Message}");
        }
        finally
        {
            recurringScheduleDialogModel.IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task<bool> UpdateRecurringScheduleAsync()
    {
        if (!recurringScheduleDialogModel.Id.HasValue)
        {
            return false;
        }

        var updateRequest = new
        {
            Name = string.IsNullOrWhiteSpace(recurringScheduleDialogModel.Name) ? null : recurringScheduleDialogModel.Name.Trim(),
            Anchor = DateOnly.FromDateTime(recurringScheduleDialogModel.DateTime),
            Currency = recurringScheduleDialogModel.Currency,
            Amount = recurringScheduleDialogModel.Amount!.Value,
            Recurrence = recurringScheduleDialogModel.Recurrence,
            CustomIntervalDays = recurringScheduleDialogModel.DaysInterval
        };

        var response = await DataService.HttpClient.PutAsJsonAsync($"api/v1/recurring-schedules/{recurringScheduleDialogModel.Id.Value}", updateRequest);
        
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to update recurring schedule: {response.StatusCode}");
        }
        
        return response.IsSuccessStatusCode;
    }

    private async Task<bool> CreateRecurringScheduleAsync()
    {
        if (recurringScheduleDialogModel.ScheduleType == Api.ScheduleType.Income)
        {
            var createRequest = new
            {
                Anchor = DateOnly.FromDateTime(recurringScheduleDialogModel.DateTime),
                Currency = recurringScheduleDialogModel.Currency,
                Amount = recurringScheduleDialogModel.Amount!.Value,
                Recurrence = recurringScheduleDialogModel.Recurrence,
                CustomIntervalDays = recurringScheduleDialogModel.DaysInterval,
                Name = string.IsNullOrWhiteSpace(recurringScheduleDialogModel.Name) ? null : recurringScheduleDialogModel.Name.Trim()
            };

            var response = await DataService.HttpClient.PostAsJsonAsync("api/v1/recurring-schedules/income", createRequest);
            
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error creating income schedule: {response.StatusCode}");
            }
            
            return response.IsSuccessStatusCode;
        }
        else
        {
            var createRequest = new
            {
                Name = recurringScheduleDialogModel.Name!.Trim(),
                Anchor = DateOnly.FromDateTime(recurringScheduleDialogModel.DateTime),
                Currency = recurringScheduleDialogModel.Currency,
                Amount = recurringScheduleDialogModel.Amount!.Value,
                Recurrence = recurringScheduleDialogModel.Recurrence,
                CustomIntervalDays = recurringScheduleDialogModel.DaysInterval
            };

            var response = await DataService.HttpClient.PostAsJsonAsync("api/v1/recurring-schedules/expenses", createRequest);
            
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error creating expense schedule: {response.StatusCode}");
            }
            
            return response.IsSuccessStatusCode;
        }
    }

    private async Task DeleteRecurringSchedule()
    {
        if (!recurringScheduleDialogModel.IsEditMode || !recurringScheduleDialogModel.Id.HasValue)
        {
            return;
        }

        recurringScheduleDialogModel.IsDeleting = true;
        StateHasChanged();

        try
        {
            var response = await DataService.HttpClient.DeleteAsync($"api/v1/recurring-schedules/{recurringScheduleDialogModel.Id.Value}");
            
            if (response.IsSuccessStatusCode)
            {
                await RefreshSchedulesAndCloseDialog();
            }
            else
            {
                Console.WriteLine($"Failed to delete recurring schedule: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting recurring schedule: {ex.Message}");
        }
        finally
        {
            recurringScheduleDialogModel.IsDeleting = false;
            StateHasChanged();
        }
    }

    private async Task RefreshSchedulesAndCloseDialog()
    {
        DataService.ClearCache();
        await DataService.LoadRecurringSchedulesAsync();
        await DataService.CacheRecurringScheduleOccurrencesAsync(currentMonth.Year, currentMonth.Month);
        await DataService.CacheAdhocTransactionsAsync(currentMonth.Year, currentMonth.Month);
        await DataService.CalculateRunningTotalsAsync(currentMonth.Year, currentMonth.Month);
        CloseRecurringScheduleDialog();
        
        // Force UI update
        StateHasChanged();
    }

    private async Task RefreshCalendarDataAsync()
    {
        // Clear only the specific caches that need refreshing
        DataService.ClearCacheForMonth(currentMonthKey);
        
        // Re-cache both recurring schedules AND adhoc transactions
        await DataService.CacheRecurringScheduleOccurrencesAsync(currentMonth.Year, currentMonth.Month);
        await DataService.CacheAdhocTransactionsAsync(currentMonth.Year, currentMonth.Month);
        await DataService.CalculateRunningTotalsAsync(currentMonth.Year, currentMonth.Month);
        
        // Force UI update
        StateHasChanged();
    }

    // Day details dialog methods
    private void OpenDayDetailsDialog(DateOnly day)
    {
        selectedDayForDetails = day;
        showDayDetailsDialog = true;
        StateHasChanged();
    }

    private void CloseDayDetailsDialog()
    {
        showDayDetailsDialog = false;
        selectedDayForDetails = DateOnly.MinValue;
        StateHasChanged();
    }

    private string GetDayDetailsTitle()
    {
        if (selectedDayForDetails == DateOnly.MinValue)
            return "Day Details";
        
        var isToday = selectedDayForDetails == DateOnly.FromDateTime(DateTime.Today);
        var dayText = isToday ? "Today" : selectedDayForDetails.ToString("dddd, MMMM d, yyyy");
        return $"{dayText}";
    }

    // Methods to add new items for a specific day
    private void AddNewIncomeScheduleForDay(DateOnly date)
    {
        recurringScheduleDialogModel = new UnifiedScheduleDialog.UnifiedScheduleDialogModel
        {
            ScheduleType = Api.ScheduleType.Income,
            DateTime = date.ToDateTime(TimeOnly.MinValue),
            Recurrence = Api.RecurrencePattern.Monthly,
            IsEditMode = false
        };
        CloseDayDetailsDialog();
        showRecurringScheduleDialog = true;
        StateHasChanged();
    }

    private void AddNewExpenseScheduleForDay(DateOnly date)
    {
        recurringScheduleDialogModel = new UnifiedScheduleDialog.UnifiedScheduleDialogModel
        {
            ScheduleType = Api.ScheduleType.Expense,
            DateTime = date.ToDateTime(TimeOnly.MinValue),
            Recurrence = Api.RecurrencePattern.Monthly,
            IsEditMode = false
        };
        CloseDayDetailsDialog();
        showRecurringScheduleDialog = true;
        StateHasChanged();
    }

    private void AddNewIncomeTransactionForDay(DateOnly date)
    {
        adhocTransactionDialogModel = new FinancialItemDialog.FinancialItemDialogModel
        {
            DateTime = date.ToDateTime(TimeOnly.MinValue),
            TransactionType = Domain.TransactionType.Income,
            IsEditMode = false
        };
        CloseDayDetailsDialog();
        showAdhocTransactionDialog = true;
        StateHasChanged();
    }

    private void AddNewExpenseTransactionForDay(DateOnly date)
    {
        adhocTransactionDialogModel = new FinancialItemDialog.FinancialItemDialogModel
        {
            DateTime = date.ToDateTime(TimeOnly.MinValue),
            TransactionType = Domain.TransactionType.Expense,
            IsEditMode = false
        };
        CloseDayDetailsDialog();
        showAdhocTransactionDialog = true;
        StateHasChanged();
    }

    // Handler methods for day details dialog edit callbacks
    private void HandleEditRecurringScheduleFromDay(RecurringScheduleItem schedule)
    {
        CloseDayDetailsDialog();
        OpenRecurringScheduleDialog(schedule);
    }
    
    private void HandleEditAdhocTransactionFromDay(AdhocTransactionItem transaction)
    {
        CloseDayDetailsDialog();
        OpenAdhocTransactionDialog(transaction);
    }
}
