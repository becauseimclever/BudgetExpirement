@page "/fluentcalendar"
@inject IJSRuntime JS
@inject HttpClient Http
@using Microsoft.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Fluent Calendar</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="height: 100vh; background-color: var(--neutral-layer-1);">
    <!-- Combined Calendar Card -->
    <FluentCard Style="margin: 16px; flex: 1; overflow: hidden;">
        <!-- Calendar Header -->
        <FluentStack Orientation="Orientation.Horizontal" 
                     HorizontalAlignment="HorizontalAlignment.Center" 
                     VerticalAlignment="VerticalAlignment.Center" 
                     Style="padding: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
            <FluentButton Appearance="Appearance.Outline" 
                          OnClick="() => NavigateMonth(-1)"
                          Style="margin-right: 24px;">
                Previous
            </FluentButton>
            
            <FluentLabel Typo="Typography.PageTitle" 
                         Style="min-width: 200px; text-align: center;">
                @currentMonth.MonthName @currentMonth.Year
            </FluentLabel>
            
            <FluentButton Appearance="Appearance.Outline" 
                          OnClick="() => NavigateMonth(1)"
                          Style="margin-left: 24px;">
                Next
            </FluentButton>
        </FluentStack>

        <!-- Calendar Grid -->
        <div class="fluent-calendar-container">
            <div class="calendar-grid">
                <!-- Day Headers -->
                @foreach (var dayName in weekDayHeaders)
                {
                    <div class="calendar-header-cell">
                        <FluentLabel Typo="Typography.Body">
                            @dayName
                        </FluentLabel>
                    </div>
                }
                
                <!-- Calendar Days -->
                @foreach (var week in currentMonth.Weeks)
                {
                    @foreach (var day in week)
                    {
                        if (day == DateOnly.MinValue)
                        {
                            <div class="calendar-cell empty-cell"></div>
                        }
                        else
                        {
                            var isToday = day == DateOnly.FromDateTime(DateTime.Today);
                            var isCurrentMonth = day.Month == currentMonth.Month;
                            var paySchedulesForDay = GetPaySchedulesForDay(day);
                            var billSchedulesForDay = GetBillSchedulesForDay(day);
                            var hasEvents = paySchedulesForDay.Any() || billSchedulesForDay.Any();
                            
                            <div class="calendar-cell @GetDayCssClass(day, isToday, isCurrentMonth, hasEvents)">
                                <div style="height: 100%; padding: 8px; position: relative;">
                                    <FluentLabel Typo="Typography.Body" 
                                                 Style="@GetDayNumberStyle(isToday, isCurrentMonth)">
                                        @day.Day
                                    </FluentLabel>
                                    
                                    <!-- Pay schedule badges -->
                                    <div class="day-events" style="margin-top: 8px;">
                                        @foreach (var paySchedule in paySchedulesForDay)
                                        {
                                            <FluentCard Class="pay-schedule-card" 
                                                        Title="@GetPayScheduleTooltip(paySchedule)"
                                                        Style="margin: 1px 0; padding: 2px 4px; min-height: auto;">
                                                <FluentStack Orientation="Orientation.Vertical" 
                                                             VerticalGap="1" 
                                                             Style="align-items: flex-end;">
                                                    <FluentLabel Typo="Typography.Body" 
                                                                 Class="pay-name-label"
                                                                 Style="line-height: 1; margin: 0; font-size: 9px;">
                                                        @GetPayScheduleName(paySchedule)
                                                    </FluentLabel>
                                                    <FluentLabel Typo="Typography.Body" 
                                                                 Class="pay-amount-label"
                                                                 Style="line-height: 1; margin: 0; font-size: 10px; font-weight: 600;">
                                                        +$@paySchedule.Amount.ToString("N0")
                                                    </FluentLabel>
                                                </FluentStack>
                                            </FluentCard>
                                        }
                                        
                                        <!-- Bill schedule badges -->
                                        @foreach (var billSchedule in billSchedulesForDay)
                                        {
                                            <FluentCard Class="bill-schedule-card" 
                                                        Title="@GetBillScheduleTooltip(billSchedule)"
                                                        Style="margin: 1px 0; padding: 2px 4px; min-height: auto;">
                                                <FluentStack Orientation="Orientation.Vertical" 
                                                             VerticalGap="1" 
                                                             Style="align-items: flex-end;">
                                                    <FluentLabel Typo="Typography.Body" 
                                                                 Class="bill-name-label"
                                                                 Style="line-height: 1; margin: 0; font-size: 9px;">
                                                        @billSchedule.Name
                                                    </FluentLabel>
                                                    <FluentLabel Typo="Typography.Body" 
                                                                 Class="bill-amount-label"
                                                                 Style="line-height: 1; margin: 0; font-size: 10px; font-weight: 600;">
                                                        -$@billSchedule.Amount.ToString("N0")
                                                    </FluentLabel>
                                                </FluentStack>
                                            </FluentCard>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </FluentCard>
</FluentStack>

<style>
    .fluent-calendar-container {
        height: calc(100vh - 200px);
        min-height: 500px;
        overflow: hidden;
        padding: var(--design-unit-4);
    }
    
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: auto repeat(6, 1fr);
        height: 100%;
        min-height: 480px;
        gap: var(--stroke-width);
        background-color: var(--neutral-stroke-divider);
        border-radius: var(--control-corner-radius);
        overflow: hidden;
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
    }
    
    .calendar-header-cell {
        background-color: var(--neutral-layer-2);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--design-unit-4) var(--design-unit-2);
        min-height: 48px;
        height: 48px;
        color: var(--neutral-foreground-primary);
        font-weight: var(--font-weight-semibold);
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
    }
    
    .calendar-cell {
        background-color: var(--neutral-layer-1);
        position: relative;
        transition: background-color var(--duration-fast-out) var(--curve-decelerate-mid);
        min-height: 80px;
        height: 80px;
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
        display: flex;
        flex-direction: column;
    }
    
    .calendar-cell:hover:not(.empty-cell) {
        background-color: var(--neutral-layer-2);
        cursor: pointer;
    }
    
    .calendar-cell.empty-cell {
        background-color: var(--neutral-layer-card);
        opacity: var(--disabled-opacity);
    }
    
    .calendar-cell.today {
        background-color: var(--accent-fill-rest);
        color: var(--accent-foreground-rest);
        border-color: var(--accent-stroke-control-default);
        box-shadow: inset 0 0 0 var(--stroke-width) var(--accent-stroke-control-default);
    }
    
    .calendar-cell.today:hover {
        background-color: var(--accent-fill-hover);
    }

    .calendar-cell.today .pay-schedule-card {
        background-color: var(--neutral-layer-1) !important;
        color: var(--neutral-foreground-primary) !important;
        border-color: var(--neutral-stroke-control-default) !important;
    }
    
    .calendar-cell.other-month {
        opacity: 0.6;
    }
    
    .calendar-cell.event-day {
        border-left: calc(var(--stroke-width) * 4) solid var(--palette-blue-foreground-1);
    }
    
    .calendar-cell.event-day:not(.today) {
        background-color: var(--palette-blue-tint-60);
    }
    
    .calendar-cell.event-day:hover:not(.today) {
        background-color: var(--palette-blue-tint-50);
    }
    
    .day-events {
        display: flex;
        flex-direction: column;
        gap: var(--design-unit-1);
        align-items: flex-end;
        position: absolute;
        bottom: var(--design-unit-1);
        right: var(--design-unit-1);
        max-width: calc(100% - var(--design-unit-4));
    }

    .pay-schedule-card {
        background-color: var(--palette-green-background-1) !important;
        color: var(--palette-green-foreground-1) !important;
        border-color: var(--palette-green-border-1) !important;
        box-shadow: var(--elevation-shadow-tooltip) !important;
        font-size: var(--type-ramp-minus-2-font-size) !important;
        min-width: 0 !important;
        flex-shrink: 1 !important;
    }

    .bill-schedule-card {
        background-color: var(--palette-red-background-1) !important;
        color: var(--palette-red-foreground-1) !important;
        border-color: var(--palette-red-border-1) !important;
        box-shadow: var(--elevation-shadow-tooltip) !important;
        font-size: var(--type-ramp-minus-2-font-size) !important;
        min-width: 0 !important;
        flex-shrink: 1 !important;
    }

    .pay-name-label {
        color: var(--palette-green-foreground-2) !important;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        display: block;
    }

    .pay-amount-label {
        color: var(--palette-green-foreground-1) !important;
    }

    .bill-name-label {
        color: var(--palette-red-foreground-2) !important;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        display: block;
    }

    .bill-amount-label {
        color: var(--palette-red-foreground-1) !important;
    }
    
    @@media (max-width: 768px) {
        .fluent-calendar-container {
            padding: var(--design-unit-2);
        }
        
        .calendar-grid {
            grid-template-rows: auto repeat(6, minmax(60px, 1fr));
        }
        
        .calendar-cell {
            min-height: 60px;
        }
        
        .calendar-header-cell {
            padding: var(--design-unit-2) var(--design-unit-1);
            min-height: 32px;
        }

        .pay-schedule-card {
            font-size: var(--type-ramp-minus-3-font-size) !important;
            padding: var(--design-unit-1) !important;
        }

        .bill-schedule-card {
            font-size: var(--type-ramp-minus-3-font-size) !important;
            padding: var(--design-unit-1) !important;
        }

        .pay-name-label {
            font-size: var(--type-ramp-minus-3-font-size) !important;
        }

        .pay-amount-label {
            font-size: var(--type-ramp-minus-2-font-size) !important;
        }

        .bill-name-label {
            font-size: var(--type-ramp-minus-3-font-size) !important;
        }

        .bill-amount-label {
            font-size: var(--type-ramp-minus-2-font-size) !important;
        }
    }
</style>

@code {
    private CalendarMonth currentMonth = new();
    private readonly string[] weekDayHeaders = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    
    // Pay schedule data
    private List<PayScheduleItem> paySchedules = new();
    private Dictionary<string, Dictionary<DateOnly, List<PayScheduleItem>>> payOccurrenceCache = new();
    
    // Bill schedule data
    private List<BillScheduleItem> billSchedules = new();
    private Dictionary<string, Dictionary<DateOnly, List<BillScheduleItem>>> billOccurrenceCache = new();
    
    private string currentMonthKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPaySchedules();
        await LoadBillSchedules();
        await LoadCurrentMonth();
    }

    private async Task LoadPaySchedules()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<PagedResult<PayScheduleItem>>("api/v1/payschedules?page=1&pageSize=100");
            if (result?.Items != null)
            {
                paySchedules = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pay schedules: {ex.Message}");
        }
    }

    private async Task LoadBillSchedules()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<PagedResult<BillScheduleItem>>("api/v1/billschedules?page=1&pageSize=100");
            if (result?.Items != null)
            {
                billSchedules = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bill schedules: {ex.Message}");
        }
    }

    private async Task LoadCurrentMonth()
    {
        var now = DateTime.Now;
        currentMonth = BuildCalendarMonth(now.Year, now.Month);
        currentMonthKey = $"{now.Year:D4}-{now.Month:D2}";
        
        // Cache pay occurrences for current month
        await CachePayOccurrences(now.Year, now.Month);
        await CacheBillOccurrences(now.Year, now.Month);
        StateHasChanged();
    }

    private async Task NavigateMonth(int direction)
    {
        var currentDate = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var newDate = currentDate.AddMonths(direction);
        
        currentMonth = BuildCalendarMonth(newDate.Year, newDate.Month);
        currentMonthKey = $"{newDate.Year:D4}-{newDate.Month:D2}";
        
        // Cache pay occurrences for new month
        await CachePayOccurrences(newDate.Year, newDate.Month);
        await CacheBillOccurrences(newDate.Year, newDate.Month);
        StateHasChanged();
    }

    private async Task CachePayOccurrences(int year, int month)
    {
        var monthKey = $"{year:D4}-{month:D2}";
        if (payOccurrenceCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1)
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        var monthOccurrences = new Dictionary<DateOnly, List<PayScheduleItem>>();

        foreach (var paySchedule in paySchedules)
        {
            try
            {
                var occurrences = await Http.GetFromJsonAsync<List<DateOnly>>($"api/v1/payschedules/{paySchedule.Id}/occurrences?start={startDate:yyyy-MM-dd}&end={endDate:yyyy-MM-dd}");
                if (occurrences != null)
                {
                    foreach (var occurrence in occurrences)
                    {
                        if (!monthOccurrences.ContainsKey(occurrence))
                        {
                            monthOccurrences[occurrence] = new List<PayScheduleItem>();
                        }
                        monthOccurrences[occurrence].Add(paySchedule);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading occurrences for pay schedule {paySchedule.Id}: {ex.Message}");
            }
        }

        payOccurrenceCache[monthKey] = monthOccurrences;
    }

    private async Task CacheBillOccurrences(int year, int month)
    {
        var monthKey = $"{year:D4}-{month:D2}";
        if (billOccurrenceCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1)
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        var monthOccurrences = new Dictionary<DateOnly, List<BillScheduleItem>>();

        foreach (var billSchedule in billSchedules)
        {
            try
            {
                var occurrences = await Http.GetFromJsonAsync<List<DateOnly>>($"api/v1/billschedules/{billSchedule.Id}/occurrences?start={startDate:yyyy-MM-dd}&end={endDate:yyyy-MM-dd}");
                if (occurrences != null)
                {
                    foreach (var occurrence in occurrences)
                    {
                        if (!monthOccurrences.ContainsKey(occurrence))
                        {
                            monthOccurrences[occurrence] = new List<BillScheduleItem>();
                        }
                        monthOccurrences[occurrence].Add(billSchedule);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading occurrences for bill schedule {billSchedule.Id}: {ex.Message}");
            }
        }

        billOccurrenceCache[monthKey] = monthOccurrences;
    }

    private List<PayScheduleItem> GetPaySchedulesForDay(DateOnly day)
    {
        if (!payOccurrenceCache.ContainsKey(currentMonthKey))
            return new List<PayScheduleItem>();

        var monthOccurrences = payOccurrenceCache[currentMonthKey];
        return monthOccurrences.ContainsKey(day) ? monthOccurrences[day] : new List<PayScheduleItem>();
    }

    private List<BillScheduleItem> GetBillSchedulesForDay(DateOnly day)
    {
        if (!billOccurrenceCache.ContainsKey(currentMonthKey))
            return new List<BillScheduleItem>();

        var monthOccurrences = billOccurrenceCache[currentMonthKey];
        return monthOccurrences.ContainsKey(day) ? monthOccurrences[day] : new List<BillScheduleItem>();
    }

    private string GetPayScheduleName(PayScheduleItem paySchedule)
    {
        // Create a meaningful name from the pay schedule data
        return $"{paySchedule.Recurrence} {paySchedule.Anchor:MMM d}";
    }

    private string GetPayScheduleTooltip(PayScheduleItem paySchedule)
    {
        return $"{paySchedule.Recurrence} pay of {paySchedule.Currency} ${paySchedule.Amount:N2} (Anchor: {paySchedule.Anchor:yyyy-MM-dd})";
    }

    private string GetBillScheduleTooltip(BillScheduleItem billSchedule)
    {
        var recurrenceText = billSchedule.Recurrence switch
        {
            0 => "Monthly",
            1 => "Weekly", 
            2 => "BiWeekly",
            _ => "Custom"
        };
        return $"{recurrenceText} bill: {billSchedule.Name} - {billSchedule.Currency} ${billSchedule.Amount:N2} (Anchor: {billSchedule.Anchor:yyyy-MM-dd})";
    }

    private string GetDayCssClass(DateOnly day, bool isToday, bool isCurrentMonth, bool hasEvents)
    {
        var classes = new List<string> { "calendar-day" };
        
        if (isToday) 
            classes.Add("today");
        if (!isCurrentMonth) 
            classes.Add("other-month");
        if (hasEvents)
            classes.Add("event-day");
        
        return string.Join(" ", classes);
    }

    private string GetDayNumberStyle(bool isToday, bool isCurrentMonth)
    {
        if (isToday)
            return "color: var(--accent-foreground-rest); font-weight: bold;";
        if (!isCurrentMonth)
            return "color: var(--neutral-foreground-secondary);";
        
        return "color: var(--neutral-foreground-primary);";
    }

    private CalendarMonth BuildCalendarMonth(int year, int month)
    {
        var firstDay = new DateTime(year, month, 1);
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var startOfWeek = (int)firstDay.DayOfWeek; // Sunday = 0
        var weeks = new List<List<DateOnly>>();
        var currentWeek = new List<DateOnly>();
        
        // Add days from previous month to fill first week
        var prevMonth = firstDay.AddMonths(-1);
        var daysInPrevMonth = DateTime.DaysInMonth(prevMonth.Year, prevMonth.Month);
        for (int i = startOfWeek - 1; i >= 0; i--)
        {
            currentWeek.Add(new DateOnly(prevMonth.Year, prevMonth.Month, daysInPrevMonth - i));
        }
        
        // Add days of current month
        for (int day = 1; day <= daysInMonth; day++)
        {
            currentWeek.Add(new DateOnly(year, month, day));
            if (currentWeek.Count == 7)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<DateOnly>();
            }
        }
        
        // Fill remaining cells with next month days
        if (currentWeek.Count > 0)
        {
            var nextMonth = firstDay.AddMonths(1);
            int nextMonthDay = 1;
            while (currentWeek.Count < 7)
            {
                currentWeek.Add(new DateOnly(nextMonth.Year, nextMonth.Month, nextMonthDay));
                nextMonthDay++;
            }
            weeks.Add(currentWeek);
        }
        
        // Ensure we have 6 rows for consistent layout
        while (weeks.Count < 6)
        {
            var lastWeek = weeks[^1];
            var lastDay = lastWeek[^1];
            var newWeek = new List<DateOnly>();
            
            for (int i = 1; i <= 7; i++)
            {
                var nextDay = lastDay.AddDays(i);
                newWeek.Add(nextDay);
            }
            weeks.Add(newWeek);
        }
        
        return new CalendarMonth
        {
            Year = year,
            Month = month,
            MonthName = firstDay.ToString("MMMM"),
            Weeks = weeks,
        };
    }

    private sealed class CalendarMonth
    {
        public int Year { get; set; }
        public int Month { get; set; }
        public string MonthName { get; set; } = string.Empty;
        public List<List<DateOnly>> Weeks { get; set; } = new();
    }

    // Data Models
    private sealed record PayScheduleItem(Guid Id, DateOnly Anchor, string Currency, decimal Amount, int? DaysInterval, DateTime CreatedUtc, DateTime? UpdatedUtc, RecurrenceKind Recurrence);
    
    private sealed record BillScheduleItem(Guid Id, string Name, DateOnly Anchor, string Currency, decimal Amount, int Recurrence, DateTime CreatedUtc, DateTime? UpdatedUtc);
    
    private enum RecurrenceKind { Weekly, Monthly, BiWeekly, Custom }

    private sealed class PagedResult<TItem>
    {
        public IReadOnlyList<TItem> Items { get; set; } = Array.Empty<TItem>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public long TotalCount { get; set; }
    }
}
