@page "/"
@page "/paycalendar"
@inject HttpClient Http
@inject IJSRuntime JS
@using BudgetExperiment.Client.Api

<PageTitle>Pay Calendar</PageTitle>

<div class="calendar-container" style="width: 100%; height: 100%; background-color: #f5f5f5; padding: 20px; box-sizing: border-box;">
    <div class="calendar-header">
        <div class="calendar-controls">
            <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateMonth(-1)">← Previous</button>
            <h4 class="month-title">@currentMonth.MonthName @currentMonth.Year</h4>
            <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateMonth(1)">Next →</button>
        </div>
        <div class="schedule-selector">
            <label>Pay Schedule:
                <select value="@selectedScheduleId" @onchange="OnScheduleChanged">
                    @foreach (var ps in paySchedules)
                    {
                        <option value="@ps.Id">@ps.Recurrence @ps.Anchor (@ps.Currency @ps.Amount)</option>
                    }
                </select>
            </label>
        </div>
    </div>

    @if (currentMonth.Year > 1)
    {
        <div class="calendar-month-full">
            <table class="table table-bordered calendar-table-full">
                <thead>
                    <tr class="calendar-header-row">
                        @foreach (var wd in weekDayHeaders)
                        {
                            <th>@wd</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var week in currentMonth.Weeks)
                    {
                        <tr>
                            @foreach (var day in week)
                            {
                                if (day == DateOnly.MinValue)
                                {
                                    <td class="empty-day"></td>
                                }
                                else
                                {
                                    var hasPay = payOccurrenceCache.ContainsKey(currentMonthKey) && payOccurrenceCache[currentMonthKey].Contains(day);
                                    var hasBill = billOccurrenceCache.ContainsKey(currentMonthKey) && billOccurrenceCache[currentMonthKey].Contains(day);
                                    var hasExpense = expenseCache.ContainsKey(currentMonthKey) && expenseCache[currentMonthKey].ContainsKey(day);
                                    var hasAdhocPayment = adhocPaymentCache.ContainsKey(currentMonthKey) && adhocPaymentCache[currentMonthKey].ContainsKey(day);
                                    
                                    var cssClass = "calendar-day";
                                    if (hasPay && hasBill) cssClass += " pay-day bill-day both-day";
                                    else if (hasPay) cssClass += " pay-day";
                                    else if (hasBill) cssClass += " bill-day";
                                    if (hasExpense) cssClass += " has-expense";
                                    if (hasAdhocPayment) cssClass += " has-adhoc-payment";
                                    if (day == DateOnly.FromDateTime(DateTime.Today)) cssClass += " today";
                                    
                                    <td class="@cssClass" @oncontextmenu="@(e => OnRightClick(e, day))" @oncontextmenu:preventDefault="true">
                                        <div class="day-number">@day.Day</div>
                                        <div class="day-events">
                                            @if (hasPay)
                                            {
                                                <div class="pay-amount">+$@selectedAmount.ToString("N0")</div>
                                            }
                                            @if (hasBill)
                                            {
                                                @foreach (var bill in GetBillsForDay(day))
                                                {
                                                    <div class="bill-amount">-$@bill.Amount.ToString("N0")</div>
                                                }
                                            }
                                            @if (hasExpense)
                                            {
                                                @foreach (var expense in GetExpensesForDay(day))
                                                {
                                                    <div class="expense-amount" 
                                                         title="@expense.Description"
                                                         @oncontextmenu="@(e => OnExpenseRightClick(e, expense))" 
                                                         @oncontextmenu:preventDefault="true"
                                                         @oncontextmenu:stopPropagation="true">
                                                        -$@expense.Amount.ToString("N0")
                                                    </div>
                                                }
                                            }
                                            @if (hasAdhocPayment)
                                            {
                                                @foreach (var adhocPayment in GetAdhocPaymentsForDay(day))
                                                {
                                                    <div class="adhoc-payment-amount" 
                                                         title="@adhocPayment.Description"
                                                         @oncontextmenu="@(e => OnAdhocPaymentRightClick(e, adhocPayment))" 
                                                         @oncontextmenu:preventDefault="true"
                                                         @oncontextmenu:stopPropagation="true">
                                                        +$@adhocPayment.Amount.ToString("N0")
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@* Context menu for adding/deleting items *@
@if (showContextMenu)
{
    <div class="context-menu" style="position: fixed; left: @(contextMenuX)px; top: @(contextMenuY)px; z-index: 1000; background: white; border: 1px solid #ccc; border-radius: 4px; padding: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" @onclick:stopPropagation="true">
        @if (contextMenuType == ContextMenuType.Add)
        {
            <div class="context-menu-item" style="padding: 8px 12px; cursor: pointer; border-radius: 3px; hover: background-color: #f0f0f0;" @onclick="() => AddExpense(contextMenuDate)">
                Add Expense for @contextMenuDate.ToString("MMM d")
            </div>
            <div class="context-menu-item" style="padding: 8px 12px; cursor: pointer; border-radius: 3px; hover: background-color: #f0f0f0;" @onclick="() => AddAdhocPayment(contextMenuDate)">
                Add Adhoc Payment for @contextMenuDate.ToString("MMM d")
            </div>
        }
        else if (contextMenuType == ContextMenuType.DeleteExpense && contextMenuExpense != null)
        {
            <div class="context-menu-item" style="padding: 8px 12px; cursor: pointer; border-radius: 3px; hover: background-color: #ffe6e6; color: #d32f2f;" @onclick="() => DeleteExpense(contextMenuExpense)">
                Delete Expense: @contextMenuExpense.Description ($@contextMenuExpense.Amount.ToString("N0"))
            </div>
        }
        else if (contextMenuType == ContextMenuType.DeleteAdhocPayment && contextMenuAdhocPayment != null)
        {
            <div class="context-menu-item" style="padding: 8px 12px; cursor: pointer; border-radius: 3px; hover: background-color: #ffe6e6; color: #d32f2f;" @onclick="() => DeleteAdhocPayment(contextMenuAdhocPayment)">
                Delete Adhoc Payment: @contextMenuAdhocPayment.Description ($@contextMenuAdhocPayment.Amount.ToString("N0"))
            </div>
        }
    </div>
    
    <!-- Click outside to close context menu -->
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 999;" 
         @onclick="() => showContextMenu = false" 
         @oncontextmenu="@OnBackgroundRightClick" 
         @oncontextmenu:preventDefault="true"></div>
}

@* Toast notifications *@
@if (toastMessages.Count > 0)
{
    <div class="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 1200; min-width: 300px;">
        @foreach (var toast in toastMessages)
        {
            <div class="toast" style="background: @(toast.IsError ? "#f8d7da" : "#d1ecf1"); color: @(toast.IsError ? "#721c24" : "#0c5460"); border: 1px solid @(toast.IsError ? "#f5c6cb" : "#bee5eb"); border-radius: 4px; padding: 12px 16px; margin-bottom: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <strong>@(toast.IsError ? "Error" : "Success")</strong><br />
                    @toast.Message
                </div>
                <button type="button" style="background: none; border: none; font-size: 18px; cursor: pointer; color: inherit; margin-left: 12px;" @onclick="() => RemoveToast(toast.Id)">&times;</button>
            </div>
        }
    </div>
}

@* Modal for adding expenses *@
@if (showExpenseModal)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1100; display: flex; justify-content: center; align-items: center;" @onclick="() => CloseExpenseModal()">
        <div class="modal-content" style="background: white; border-radius: 8px; padding: 24px; width: 90%; max-width: 500px; box-shadow: 0 10px 25px rgba(0,0,0,0.3);" @onclick:stopPropagation="true">
            <div class="modal-header" style="margin-bottom: 20px;">
                <h4 style="margin: 0; color: #333;">Add Expense for @expenseModalDate.ToString("MMMM d, yyyy")</h4>
                <button type="button" class="btn-close" style="position: absolute; top: 16px; right: 16px; background: none; border: none; font-size: 24px; cursor: pointer; color: #666;" @onclick="CloseExpenseModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group" style="margin-bottom: 16px;">
                    <label for="expenseDescription" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Description</label>
                    <input id="expenseDescription" type="text" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="Enter expense description" @bind="newExpenseDescription" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveExpense(); })" />
                </div>
                <div class="form-group" style="margin-bottom: 16px;">
                    <label for="expenseAmount" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Amount ($)</label>
                    <input id="expenseAmount" type="number" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="0.00" step="0.01" min="0" @bind="newExpenseAmount" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveExpense(); })" />
                </div>
                <div class="form-group" style="margin-bottom: 20px;">
                    <label for="expenseCategory" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Category (Optional)</label>
                    <input id="expenseCategory" type="text" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="e.g., Groceries, Gas, Entertainment" @bind="newExpenseCategory" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveExpense(); })" />
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 12px; justify-content: flex-end;">
                <button type="button" class="btn btn-secondary" style="padding: 10px 20px; border-radius: 4px; border: 2px solid #6c757d; background: transparent; color: #6c757d; cursor: pointer; font-weight: 500;" @onclick="CloseExpenseModal">Cancel</button>
                <button type="button" class="btn btn-primary" style="padding: 10px 20px; border-radius: 4px; border: none; background: #1b6ec2; color: white; cursor: pointer; font-weight: 500;" @onclick="SaveExpense" disabled="@(isSaving || string.IsNullOrWhiteSpace(newExpenseDescription) || newExpenseAmount <= 0)">@(isSaving ? "Saving..." : "Add Expense")</button>
            </div>
        </div>
    </div>
}

@* Modal for adding adhoc payments *@
@if (showAdhocPaymentModal)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); z-index: 1100; display: flex; justify-content: center; align-items: center;" @onclick="() => CloseAdhocPaymentModal()">
        <div class="modal-content" style="background: white; border-radius: 8px; padding: 24px; width: 90%; max-width: 500px; box-shadow: 0 10px 25px rgba(0,0,0,0.3);" @onclick:stopPropagation="true">
            <div class="modal-header" style="margin-bottom: 20px;">
                <h4 style="margin: 0; color: #333;">Add Adhoc Payment for @adhocPaymentModalDate.ToString("MMMM d, yyyy")</h4>
                <button type="button" class="btn-close" style="position: absolute; top: 16px; right: 16px; background: none; border: none; font-size: 24px; cursor: pointer; color: #666;" @onclick="CloseAdhocPaymentModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group" style="margin-bottom: 16px;">
                    <label for="adhocPaymentDescription" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Description</label>
                    <input id="adhocPaymentDescription" type="text" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="Enter payment description (e.g., Bonus, Gift)" @bind="newAdhocPaymentDescription" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveAdhocPayment(); })" />
                </div>
                <div class="form-group" style="margin-bottom: 16px;">
                    <label for="adhocPaymentAmount" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Amount ($)</label>
                    <input id="adhocPaymentAmount" type="number" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="0.00" step="0.01" min="0" @bind="newAdhocPaymentAmount" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveAdhocPayment(); })" />
                </div>
                <div class="form-group" style="margin-bottom: 20px;">
                    <label for="adhocPaymentCategory" style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">Category (Optional)</label>
                    <input id="adhocPaymentCategory" type="text" class="form-control" style="width: 100%; padding: 8px 12px; border: 2px solid #ddd; border-radius: 4px; font-size: 16px;" placeholder="e.g., Bonus, Gift, Freelance" @bind="newAdhocPaymentCategory" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveAdhocPayment(); })" />
                </div>
            </div>
            <div class="modal-footer" style="display: flex; gap: 12px; justify-content: flex-end;">
                <button type="button" class="btn btn-secondary" style="padding: 10px 20px; border-radius: 4px; border: 2px solid #6c757d; background: transparent; color: #6c757d; cursor: pointer; font-weight: 500;" @onclick="CloseAdhocPaymentModal">Cancel</button>
                <button type="button" class="btn btn-primary" style="padding: 10px 20px; border-radius: 4px; border: none; background: #28a745; color: white; cursor: pointer; font-weight: 500;" @onclick="SaveAdhocPayment" disabled="@(isSavingAdhocPayment || string.IsNullOrWhiteSpace(newAdhocPaymentDescription) || newAdhocPaymentAmount <= 0)">@(isSavingAdhocPayment ? "Saving..." : "Add Payment")</button>
            </div>
        </div>
    </div>
}

@code {
    private string? selectedScheduleId;
    private List<PayScheduleItem> paySchedules = new();
    private List<BillScheduleItem> billSchedules = new();
    private CalendarMonth currentMonth = new();
    private string currentMonthKey = string.Empty;
    private decimal selectedAmount;
    private DateTime wheelDebounceTime = DateTime.MinValue;

    private readonly string[] weekDayHeaders = new[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

    // Cache for storing occurrences by month key (yyyy-MM format)
    private readonly Dictionary<string, HashSet<DateOnly>> payOccurrenceCache = new();
    private readonly Dictionary<string, HashSet<DateOnly>> billOccurrenceCache = new();
    private readonly Dictionary<string, List<BillScheduleItem>> billDetailsCache = new();
    
    // Expense cache: monthKey -> date -> list of expenses
    private readonly Dictionary<string, Dictionary<DateOnly, List<ExpenseItem>>> expenseCache = new();
    
    // Adhoc payment cache: monthKey -> date -> list of adhoc payments
    private readonly Dictionary<string, Dictionary<DateOnly, List<AdhocPaymentItem>>> adhocPaymentCache = new();
    
    // Context menu state
    private bool showContextMenu = false;
    private DateOnly contextMenuDate;
    private double contextMenuX = 0;
    private double contextMenuY = 0;
    private ContextMenuType contextMenuType = ContextMenuType.Add;
    private ExpenseItem? contextMenuExpense = null;
    private AdhocPaymentItem? contextMenuAdhocPayment = null;
    
    // Expense modal state
    private bool showExpenseModal = false;
    private DateOnly expenseModalDate;
    private string newExpenseDescription = string.Empty;
    private decimal newExpenseAmount = 0;
    private string newExpenseCategory = string.Empty;
    private bool isSaving = false;
    
    // Adhoc payment modal state
    private bool showAdhocPaymentModal = false;
    private DateOnly adhocPaymentModalDate;
    private string newAdhocPaymentDescription = string.Empty;
    private decimal newAdhocPaymentAmount = 0;
    private string newAdhocPaymentCategory = string.Empty;
    private bool isSavingAdhocPayment = false;
    
    // Toast notification state
    private readonly List<ToastMessage> toastMessages = new();
    private int nextToastId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadPaySchedules();
        await LoadBillSchedules();
        
        // Auto-select first schedule and load current month
        if (paySchedules.Count > 0)
        {
            selectedScheduleId = paySchedules[0].Id.ToString();
            selectedAmount = paySchedules[0].Amount;
            await LoadCurrentMonth();
        }
    }

    private async Task LoadPaySchedules()
    {
        var result = await Http.GetFromJsonAsync<PagedResult<PayScheduleItem>>("api/v1/payschedules?page=1&pageSize=100");
        if (result?.Items != null)
        {
            paySchedules = result.Items.ToList();
        }
    }

    private async Task LoadBillSchedules()
    {
        var result = await Http.GetFromJsonAsync<PagedResult<BillScheduleItem>>("api/v1/billschedules?page=1&pageSize=100");
        if (result?.Items != null)
        {
            billSchedules = result.Items.ToList();
        }
    }

    private async Task OnScheduleChanged(ChangeEventArgs e)
    {
        selectedScheduleId = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedScheduleId)) return;
        
        var schedule = paySchedules.FirstOrDefault(p => p.Id.ToString() == selectedScheduleId);
        selectedAmount = schedule?.Amount ?? 0m;
        
        // Clear pay cache and reload
        payOccurrenceCache.Clear();
        await LoadCurrentMonth();
    }

    private async Task LoadCurrentMonth()
    {
        var now = DateTime.Now;
        currentMonth = BuildCalendarMonth(now.Year, now.Month);
        currentMonthKey = $"{now.Year:D4}-{now.Month:D2}";
        
        // Pre-cache current, previous, and next months for pay, bills, and expenses
        await Task.WhenAll(
            CachePayOccurrences(now.Year, now.Month - 1),
            CachePayOccurrences(now.Year, now.Month),
            CachePayOccurrences(now.Year, now.Month + 1),
            CacheBillOccurrences(now.Year, now.Month - 1),
            CacheBillOccurrences(now.Year, now.Month),
            CacheBillOccurrences(now.Year, now.Month + 1),
            CacheExpenses(now.Year, now.Month - 1),
            CacheExpenses(now.Year, now.Month),
            CacheExpenses(now.Year, now.Month + 1),
            CacheAdhocPayments(now.Year, now.Month - 1),
            CacheAdhocPayments(now.Year, now.Month),
            CacheAdhocPayments(now.Year, now.Month + 1)
        );
        
        StateHasChanged();
    }

    private async Task NavigateMonth(int direction)
    {
        var currentDate = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var newDate = currentDate.AddMonths(direction);
        
        currentMonth = BuildCalendarMonth(newDate.Year, newDate.Month);
        currentMonthKey = $"{newDate.Year:D4}-{newDate.Month:D2}";
        
        // Pre-cache surrounding months for pay, bills, and expenses
        var prevMonth = newDate.AddMonths(-1);
        var nextMonth = newDate.AddMonths(1);
        
        await Task.WhenAll(
            CachePayOccurrences(prevMonth.Year, prevMonth.Month),
            CachePayOccurrences(newDate.Year, newDate.Month),
            CachePayOccurrences(nextMonth.Year, nextMonth.Month),
            CacheBillOccurrences(prevMonth.Year, prevMonth.Month),
            CacheBillOccurrences(newDate.Year, newDate.Month),
            CacheBillOccurrences(nextMonth.Year, nextMonth.Month),
            CacheExpenses(prevMonth.Year, prevMonth.Month),
            CacheExpenses(newDate.Year, newDate.Month),
            CacheExpenses(nextMonth.Year, nextMonth.Month),
            CacheAdhocPayments(prevMonth.Year, prevMonth.Month),
            CacheAdhocPayments(newDate.Year, newDate.Month),
            CacheAdhocPayments(nextMonth.Year, nextMonth.Month)
        );
        
        StateHasChanged();
    }

    private async Task OnWheel(WheelEventArgs e)
    {
        // Debounce wheel events
        var now = DateTime.Now;
        if (now - wheelDebounceTime < TimeSpan.FromMilliseconds(300)) return;
        wheelDebounceTime = now;

        if (Math.Abs(e.DeltaY) > 50) // Only respond to significant wheel movements
        {
            await NavigateMonth(e.DeltaY > 0 ? 1 : -1);
        }
    }

    private async Task CachePayOccurrences(int year, int month)
    {
        if (string.IsNullOrEmpty(selectedScheduleId)) return;
        if (!Guid.TryParse(selectedScheduleId, out var id)) return;

        var monthKey = $"{year:D4}-{month:D2}";
        if (payOccurrenceCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1) 
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        try
        {
            var occurrences = await Http.GetFromJsonAsync<List<DateOnly>>($"api/v1/payschedules/{id}/occurrences?start={startDate:yyyy-MM-dd}&end={endDate:yyyy-MM-dd}");
            payOccurrenceCache[monthKey] = occurrences?.ToHashSet() ?? new HashSet<DateOnly>();
        }
        catch
        {
            payOccurrenceCache[monthKey] = new HashSet<DateOnly>();
        }
    }

    private async Task CacheBillOccurrences(int year, int month)
    {
        var monthKey = $"{year:D4}-{month:D2}";
        if (billOccurrenceCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1) 
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        var allBillOccurrences = new HashSet<DateOnly>();
        var billDetails = new List<BillScheduleItem>();

        // Get occurrences for all bill schedules
        foreach (var bill in billSchedules)
        {
            try
            {
                var occurrences = await Http.GetFromJsonAsync<List<DateOnly>>($"api/v1/billschedules/{bill.Id}/occurrences?start={startDate:yyyy-MM-dd}&end={endDate:yyyy-MM-dd}");
                if (occurrences != null)
                {
                    foreach (var occurrence in occurrences)
                    {
                        allBillOccurrences.Add(occurrence);
                        billDetails.Add(bill);
                    }
                }
            }
            catch
            {
                // Skip this bill if error occurs
            }
        }

        billOccurrenceCache[monthKey] = allBillOccurrences;
        billDetailsCache[monthKey] = billDetails;
    }

    private async Task CacheExpenses(int year, int month)
    {
        var monthKey = $"{year:D4}-{month:D2}";
        if (expenseCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1) 
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        try
        {
            var expenses = await Http.GetFromJsonAsync<List<ExpenseItem>>($"api/v1/expenses/by-date-range?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
            
            // Group expenses by date
            var expensesByDate = new Dictionary<DateOnly, List<ExpenseItem>>();
            if (expenses != null)
            {
                foreach (var expense in expenses)
                {
                    if (!expensesByDate.ContainsKey(expense.Date))
                    {
                        expensesByDate[expense.Date] = new List<ExpenseItem>();
                    }
                    expensesByDate[expense.Date].Add(expense);
                }
            }
            
            expenseCache[monthKey] = expensesByDate;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Error fetching expenses: {ex.Message}");
            expenseCache[monthKey] = new Dictionary<DateOnly, List<ExpenseItem>>();
        }
    }

    private async Task CacheAdhocPayments(int year, int month)
    {
        var monthKey = $"{year:D4}-{month:D2}";
        if (adhocPaymentCache.ContainsKey(monthKey)) return; // Already cached

        // Adjust for invalid months
        var adjustedDate = new DateTime(year, month, 1);
        if (month < 1) 
        {
            adjustedDate = new DateTime(year - 1, 12, 1);
            monthKey = $"{year - 1:D4}-12";
        }
        else if (month > 12)
        {
            adjustedDate = new DateTime(year + 1, 1, 1);
            monthKey = $"{year + 1:D4}-01";
        }

        var startDate = DateOnly.FromDateTime(adjustedDate);
        var endDate = DateOnly.FromDateTime(adjustedDate.AddMonths(1).AddDays(-1));

        try
        {
            var adhocPayments = await Http.GetFromJsonAsync<List<AdhocPaymentItem>>($"api/v1/adhocpayments/by-date-range?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
            
            // Group adhoc payments by date
            var adhocPaymentsByDate = new Dictionary<DateOnly, List<AdhocPaymentItem>>();
            if (adhocPayments != null)
            {
                foreach (var adhocPayment in adhocPayments)
                {
                    if (!adhocPaymentsByDate.ContainsKey(adhocPayment.Date))
                    {
                        adhocPaymentsByDate[adhocPayment.Date] = new List<AdhocPaymentItem>();
                    }
                    adhocPaymentsByDate[adhocPayment.Date].Add(adhocPayment);
                }
            }
            
            adhocPaymentCache[monthKey] = adhocPaymentsByDate;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Error fetching adhoc payments: {ex.Message}");
            adhocPaymentCache[monthKey] = new Dictionary<DateOnly, List<AdhocPaymentItem>>();
        }
    }

    private List<BillScheduleItem> GetBillsForDay(DateOnly day)
    {
        if (!billDetailsCache.ContainsKey(currentMonthKey)) return new List<BillScheduleItem>();
        
        return billSchedules.Where(bill => 
            billOccurrenceCache.ContainsKey(currentMonthKey) && 
            billOccurrenceCache[currentMonthKey].Contains(day)).ToList();
    }

    private List<ExpenseItem> GetExpensesForDay(DateOnly day)
    {
        if (!expenseCache.ContainsKey(currentMonthKey)) return new List<ExpenseItem>();
        
        var monthExpenses = expenseCache[currentMonthKey];
        return monthExpenses.ContainsKey(day) ? monthExpenses[day] : new List<ExpenseItem>();
    }

    private List<AdhocPaymentItem> GetAdhocPaymentsForDay(DateOnly day)
    {
        if (!adhocPaymentCache.ContainsKey(currentMonthKey)) return new List<AdhocPaymentItem>();
        
        var monthAdhocPayments = adhocPaymentCache[currentMonthKey];
        return monthAdhocPayments.ContainsKey(day) ? monthAdhocPayments[day] : new List<AdhocPaymentItem>();
    }

    private void OnRightClick(MouseEventArgs e, DateOnly date)
    {
        showContextMenu = true;
        contextMenuDate = date;
        contextMenuType = ContextMenuType.Add;
        contextMenuExpense = null;
        contextMenuAdhocPayment = null;
        contextMenuX = e.ClientX;
        contextMenuY = e.ClientY;
        StateHasChanged();
    }

    private void OnExpenseRightClick(MouseEventArgs e, ExpenseItem expense)
    {
        showContextMenu = true;
        contextMenuType = ContextMenuType.DeleteExpense;
        contextMenuExpense = expense;
        contextMenuAdhocPayment = null;
        contextMenuX = e.ClientX;
        contextMenuY = e.ClientY;
        StateHasChanged();
    }

    private void OnAdhocPaymentRightClick(MouseEventArgs e, AdhocPaymentItem adhocPayment)
    {
        showContextMenu = true;
        contextMenuType = ContextMenuType.DeleteAdhocPayment;
        contextMenuExpense = null;
        contextMenuAdhocPayment = adhocPayment;
        contextMenuX = e.ClientX;
        contextMenuY = e.ClientY;
        StateHasChanged();
    }

    private void OnBackgroundRightClick(MouseEventArgs e)
    {
        // When right-clicking on the background (outside specific elements), just close the context menu
        showContextMenu = false;
        StateHasChanged();
    }

    private void AddExpense(DateOnly date)
    {
        // Open the expense modal
        showContextMenu = false;
        expenseModalDate = date;
        showExpenseModal = true;
        
        // Clear previous form data
        newExpenseDescription = string.Empty;
        newExpenseAmount = 0;
        newExpenseCategory = string.Empty;
        
        StateHasChanged();
    }
    
    private void AddAdhocPayment(DateOnly date)
    {
        // Open the adhoc payment modal
        showContextMenu = false;
        adhocPaymentModalDate = date;
        showAdhocPaymentModal = true;
        
        // Clear previous form data
        newAdhocPaymentDescription = string.Empty;
        newAdhocPaymentAmount = 0;
        newAdhocPaymentCategory = string.Empty;
        
        StateHasChanged();
    }
    
    private void CloseExpenseModal()
    {
        showExpenseModal = false;
        StateHasChanged();
    }
    
    private async Task SaveExpense()
    {
        if (string.IsNullOrWhiteSpace(newExpenseDescription) || newExpenseAmount <= 0)
        {
            return;
        }
        
        isSaving = true;
        StateHasChanged();
        
        try
        {
            var createRequest = new CreateExpenseRequest(
                Description: newExpenseDescription.Trim(),
                Currency: "USD",
                Amount: newExpenseAmount,
                Date: expenseModalDate,
                Category: string.IsNullOrWhiteSpace(newExpenseCategory) ? null : newExpenseCategory.Trim()
            );
            
            var response = await Http.PostAsJsonAsync("api/v1/expenses", createRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // Clear the expense cache for the affected month to force refresh
                var monthKey = expenseModalDate.ToString("yyyy-MM");
                expenseCache.Remove(monthKey);
                
                // Close modal
                CloseExpenseModal();
                
                // Show success message
                ShowToast($"Expense '{newExpenseDescription}' added successfully!", false);
                
                // Refresh the current view
                await LoadCurrentMonth();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to create expense: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error creating expense: {ex.Message}", true);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void CloseAdhocPaymentModal()
    {
        showAdhocPaymentModal = false;
        StateHasChanged();
    }
    
    private async Task SaveAdhocPayment()
    {
        if (string.IsNullOrWhiteSpace(newAdhocPaymentDescription) || newAdhocPaymentAmount <= 0)
        {
            return;
        }
        
        isSavingAdhocPayment = true;
        StateHasChanged();
        
        try
        {
            var createRequest = new CreateAdhocPaymentRequest(
                Description: newAdhocPaymentDescription.Trim(),
                Currency: "USD",
                Amount: newAdhocPaymentAmount,
                Date: adhocPaymentModalDate,
                Category: string.IsNullOrWhiteSpace(newAdhocPaymentCategory) ? null : newAdhocPaymentCategory.Trim()
            );
            
            var response = await Http.PostAsJsonAsync("api/v1/adhocpayments", createRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // Clear the adhoc payment cache for the affected month to force refresh
                var monthKey = adhocPaymentModalDate.ToString("yyyy-MM");
                adhocPaymentCache.Remove(monthKey);
                
                // Close modal
                CloseAdhocPaymentModal();
                
                // Show success message
                ShowToast($"Adhoc payment '{newAdhocPaymentDescription}' added successfully!", false);
                
                // Refresh the current view
                await LoadCurrentMonth();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to create adhoc payment: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error creating adhoc payment: {ex.Message}", true);
        }
        finally
        {
            isSavingAdhocPayment = false;
            StateHasChanged();
        }
    }
    
    private async Task DeleteExpense(ExpenseItem expense)
    {
        try
        {
            showContextMenu = false;
            var response = await Http.DeleteAsync($"api/v1/expenses/{expense.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                // Clear the expense cache for the affected month to force refresh
                var monthKey = expense.Date.ToString("yyyy-MM");
                expenseCache.Remove(monthKey);
                
                // Show success message
                ShowToast($"Expense '{expense.Description}' deleted successfully!", false);
                
                // Refresh the current view
                await LoadCurrentMonth();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to delete expense: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting expense: {ex.Message}", true);
        }
    }

    private async Task DeleteAdhocPayment(AdhocPaymentItem adhocPayment)
    {
        try
        {
            showContextMenu = false;
            var response = await Http.DeleteAsync($"api/v1/adhocpayments/{adhocPayment.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                // Clear the adhoc payment cache for the affected month to force refresh
                var monthKey = adhocPayment.Date.ToString("yyyy-MM");
                adhocPaymentCache.Remove(monthKey);
                
                // Show success message
                ShowToast($"Adhoc payment '{adhocPayment.Description}' deleted successfully!", false);
                
                // Refresh the current view
                await LoadCurrentMonth();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to delete adhoc payment: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting adhoc payment: {ex.Message}", true);
        }
    }
    
    private void ShowToast(string message, bool isError)
    {
        var toast = new ToastMessage(nextToastId++, message, isError);
        toastMessages.Add(toast);
        StateHasChanged();
        
        // Auto-remove toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                toastMessages.Remove(toast);
                StateHasChanged();
            });
        });
    }
    
    private void RemoveToast(int toastId)
    {
        var toast = toastMessages.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toastMessages.Remove(toast);
            StateHasChanged();
        }
    }

    private CalendarMonth BuildCalendarMonth(int year, int month)
    {
        var firstDay = new DateTime(year, month, 1);
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var offset = (int)firstDay.DayOfWeek; // Sunday=0
        var weeks = new List<List<DateOnly>>();
        var currentWeek = new List<DateOnly>();
        
        // Add empty cells for days before month start
        for (int i = 0; i < offset; i++) 
            currentWeek.Add(DateOnly.MinValue);
        
        // Add month days
        for (int day = 1; day <= daysInMonth; day++)
        {
            currentWeek.Add(new DateOnly(year, month, day));
            if (currentWeek.Count == 7)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<DateOnly>();
            }
        }
        
        // Complete last week with empty cells
        if (currentWeek.Count > 0)
        {
            while (currentWeek.Count < 7) 
                currentWeek.Add(DateOnly.MinValue);
            weeks.Add(currentWeek);
        }
        
        return new CalendarMonth
        {
            Year = year,
            Month = month,
            MonthName = firstDay.ToString("MMMM"),
            Weeks = weeks,
        };
    }

    private sealed class CalendarMonth
    {
        public int Year { get; set; }
        public int Month { get; set; }
        public string MonthName { get; set; } = string.Empty;
        public List<List<DateOnly>> Weeks { get; set; } = new();
    }

    private sealed record PayScheduleItem(Guid Id, DateOnly Anchor, string Currency, decimal Amount, int? DaysInterval, DateTime CreatedUtc, DateTime? UpdatedUtc, RecurrenceKind Recurrence);

    private sealed record BillScheduleItem(Guid Id, string Name, string Currency, decimal Amount, DateOnly Anchor, BillRecurrenceKind Recurrence, DateTime CreatedUtc, DateTime? UpdatedUtc);

    private enum RecurrenceKind { Weekly, Monthly, BiWeekly, Custom }
    private enum BillRecurrenceKind { Monthly }

    private sealed class PagedResult<TItem>
    {
        public IReadOnlyList<TItem> Items { get; set; } = Array.Empty<TItem>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public long TotalCount { get; set; }
    }
}<style>
.pay-calendar-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    background: white;
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    height: 80px;
    box-sizing: border-box;
}

.calendar-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.month-title {
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
    min-width: 250px;
    text-align: center;
    color: #2c3e50;
}

.schedule-selector select {
    padding: 0.5rem 0.75rem;
    border: 1px solid #ced4da;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    background: white;
    min-width: 200px;
}

.calendar-month-full {
    width: 100%;
    height: calc(100vh - 80px);
    overflow: hidden;
}

.calendar-table-full {
    width: 100%;
    height: 100%;
    table-layout: fixed;
    border-collapse: collapse;
    margin: 0;
}

.calendar-header-row th {
    background: #f8f9fa;
    text-align: center;
    font-weight: 600;
    font-size: 1.1rem;
    padding: 1rem 0.5rem;
    border: 1px solid #dee2e6;
    color: #495057;
    height: 60px;
}

.calendar-day {
    height: calc((100vh - 140px) / 6);
    min-height: 100px;
    vertical-align: top;
    padding: 0.75rem;
    border: 1px solid #dee2e6;
    position: relative;
    background: white;
    transition: all 0.2s ease;
}

.calendar-day:hover {
    background: #f8f9fa;
}

.calendar-day.today {
    background: #e3f2fd;
    border: 2px solid #2196f3;
}

.calendar-day.pay-day {
    background: #e8f5e8;
    border: 2px solid #4caf50;
}

.calendar-day.bill-day {
    background: #ffeaa7;
    border: 2px solid #fdcb6e;
}

.calendar-day.both-day {
    background: linear-gradient(135deg, #e8f5e8 50%, #ffeaa7 50%);
    border: 2px solid #6c5ce7;
}

.calendar-day.pay-day.today {
    background: #c8e6c9;
    border: 2px solid #2e7d32;
}

.calendar-day.bill-day.today {
    background: #ffe082;
    border: 2px solid #f57f17;
}

.calendar-day.both-day.today {
    background: linear-gradient(135deg, #c8e6c9 50%, #ffe082 50%);
    border: 2px solid #4527a0;
}

.empty-day {
    height: calc((100vh - 140px) / 6);
    min-height: 100px;
    background: #f8f8f8;
    border: 1px solid #dee2e6;
}

.day-number {
    font-weight: 600;
    font-size: 1.3rem;
    color: #333;
    margin-bottom: 0.5rem;
}

.day-events {
    position: absolute;
    bottom: 0.75rem;
    right: 0.75rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    align-items: flex-end;
}

.pay-amount {
    background: #4caf50;
    color: white;
    padding: 0.4rem 0.6rem;
    border-radius: 0.375rem;
    font-size: 0.85rem;
    font-weight: 600;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    white-space: nowrap;
}

.bill-amount {
    background: #f44336;
    color: white;
    padding: 0.4rem 0.6rem;
    border-radius: 0.375rem;
    font-size: 0.85rem;
    font-weight: 600;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    white-space: nowrap;
}

.expense-amount {
    background: #ff5722;
    color: white;
    padding: 0.4rem 0.6rem;
    border-radius: 0.375rem;
    font-size: 0.85rem;
    font-weight: 600;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    white-space: nowrap;
    cursor: context-menu;
    transition: all 0.2s ease;
}

.expense-amount:hover {
    background: #e64a19;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.adhoc-payment-amount {
    background: #28a745;
    color: white;
    padding: 0.4rem 0.6rem;
    border-radius: 0.375rem;
    font-size: 0.85rem;
    font-weight: 600;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    white-space: nowrap;
    cursor: context-menu;
    transition: all 0.2s ease;
}

.adhoc-payment-amount:hover {
    background: #218838;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.calendar-day.has-adhoc-payment {
    border-left: 4px solid #28a745;
}

.btn-outline-secondary {
    border: 2px solid #6c757d;
    color: #6c757d;
    background: transparent;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    text-decoration: none;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
}

.btn-outline-secondary:hover {
    background: #6c757d;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .calendar-header {
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .calendar-controls {
        order: 1;
    }
    
    .schedule-selector {
        order: 2;
    }
    
    .month-title {
        font-size: 1.25rem;
        min-width: auto;
    }
    
    .calendar-day {
        min-height: 60px;
        padding: 0.25rem;
    }
    
    .day-number {
        font-size: 1rem;
    }
    
    .pay-amount {
        font-size: 0.7rem;
        padding: 0.2rem 0.4rem;
    }
}
</style>

@code {
    /// <summary>
    /// Represents a toast notification message.
    /// </summary>
    private sealed record ToastMessage(int Id, string Message, bool IsError);

    /// <summary>
    /// Represents the type of context menu being displayed.
    /// </summary>
    private enum ContextMenuType
    {
        Add,
        DeleteExpense,
        DeleteAdhocPayment
    }
}
