@page "/fast-entry"
@inject IJSRuntime JS
@inject HttpClient Http
@using Microsoft.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Api
@using BudgetExperiment.Domain
@using System.Text.Json

<PageTitle>Fast Data Entry</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="height: 100vh; background-color: var(--neutral-layer-1); padding: 16px;">
    
    <!-- Header Section -->
    <FluentCard Style="margin-bottom: 16px;">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H3">
                <FluentIcon Value="@(new Icons.Regular.Size24.MoneyHand())" Style="margin-right: 8px;" />
                Fast Data Entry
            </FluentLabel>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                <FluentBadge Appearance="Appearance.Neutral">
                    Today: @totalToday.ToString("C")
                </FluentBadge>
                @if (recentEntries.Count > 0)
                {
                    <FluentBadge Appearance="@(recentEntries.Count > 5 ? Appearance.Accent : Appearance.Neutral)">
                        @recentEntries.Count entries
                    </FluentBadge>
                }
            </FluentStack>
        </FluentStack>
    </FluentCard>

    <!-- Quick Entry Form -->
    <FluentCard Style="margin-bottom: 16px;">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
            <FluentLabel Typo="Typography.H5">Quick Add Transaction</FluentLabel>
            
            <!-- Transaction Type Toggle -->
            <FluentRadioGroup @bind-Value="currentEntry.TransactionTypeString" Style="width: 100%;">
                <FluentRadio Value="@nameof(TransactionType.Expense)" 
                             Style="color: var(--palette-red-foreground-1);">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ReceiptMoney())" Style="margin-right: 4px;" /> Expense
                </FluentRadio>
                <FluentRadio Value="@nameof(TransactionType.Income)"
                             Style="color: var(--palette-green-foreground-1);">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Money())" Style="margin-right: 4px;" /> Income
                </FluentRadio>
            </FluentRadioGroup>

            <!-- Quick Entry Row -->
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" VerticalAlignment="VerticalAlignment.Center">
                
                <!-- Amount Field (Largest) -->
                <div style="flex: 2;">
                    <FluentNumberField @bind-Value="currentEntry.Amount"
                                       @onkeydown="HandleAmountKeyDown"
                                       @ref="amountFieldRef"
                                       Id="amount-field"
                                       Label="Amount ($)"
                                       Placeholder="0.00"
                                       Step="0.01m"
                                       Min="0"
                                       Autofocus="true"
                                       Style="width: 100%; font-size: 18px; font-weight: 600;" />
                    @if (!string.IsNullOrEmpty(currentEntry.AmountError))
                    {
                        <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                            @currentEntry.AmountError
                        </FluentLabel>
                    }
                </div>

                <!-- Description Field -->
                <div style="flex: 3;">
                    <FluentTextField @bind-Value="currentEntry.Name"
                                     @onkeydown="HandleDescriptionKeyDown"
                                     @ref="descriptionFieldRef"
                                     Id="description-field"
                                     Label="Description"
                                     Placeholder="What was this for?"
                                     Style="width: 100%;" />
                    @if (!string.IsNullOrEmpty(currentEntry.NameError))
                    {
                        <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                            @currentEntry.NameError
                        </FluentLabel>
                    }
                </div>

                <!-- Category Field -->
                <div style="flex: 2;">
                    <FluentTextField @bind-Value="currentEntry.Category"
                                     @onkeydown="HandleCategoryKeyDown"
                                     @ref="categoryFieldRef"
                                     Id="category-field"
                                     Label="Category"
                                     Placeholder="Optional"
                                     Style="width: 100%;" />
                </div>

                <!-- Date Field -->
                <div style="flex: 1;">
                    <FluentLabel Style="margin-bottom: 4px; font-size: 12px;">Date</FluentLabel>
                    <input type="date" 
                           id="date-field"
                           value="@currentEntry.DateString" 
                           @onchange="@((e) => currentEntry.DateString = e.Value?.ToString() ?? string.Empty)"
                           @onkeydown="HandleDateKeyDown"
                           style="width: 100%; padding: 8px; border: 1px solid var(--neutral-stroke-control-default); border-radius: var(--control-corner-radius); font-family: inherit;" />
                    @if (!string.IsNullOrEmpty(currentEntry.DateError))
                    {
                        <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                            @currentEntry.DateError
                        </FluentLabel>
                    }
                </div>

                <!-- Add Button -->
                <div>
                    <FluentButton Appearance="Appearance.Accent" 
                                  OnClick="AddTransaction"
                                  Disabled="@isSubmitting"
                                  Style="height: 32px; min-width: 80px; font-weight: 600;">
                        @if (isSubmitting)
                        {
                            <FluentProgressRing Style="width: 16px; height: 16px;" />
                        }
                        else
                        {
                            @if (currentEntry.TransactionType == TransactionType.Income)
                            {
                                <FluentIcon Value="@(new Icons.Regular.Size16.Money())" Style="margin-right: 4px;" />
                            }
                            else
                            {
                                <FluentIcon Value="@(new Icons.Regular.Size16.ReceiptMoney())" Style="margin-right: 4px;" />
                            }
                            <span>Add</span>
                        }
                    </FluentButton>
                </div>
            </FluentStack>

            <!-- Quick Actions -->
            @if (commonCategories.Count > 0)
            {
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" Style="margin-top: 8px;">
                    <FluentLabel Style="margin-right: 8px; align-self: center; font-size: 12px; color: var(--neutral-foreground-rest);">Quick categories:</FluentLabel>
                    @foreach (var category in commonCategories.Take(6))
                    {
                        <FluentButton Appearance="Appearance.Outline" 
                                      Size="ButtonSize.Small"
                                      OnClick="() => SetCategory(category)"
                                      Style="font-size: 11px; padding: 4px 8px;">
                            <FluentIcon Value="@(new Icons.Regular.Size12.Circle())" Style="margin-right: 2px;" />
                            @category
                        </FluentButton>
                    }
                </FluentStack>
            }
        </FluentStack>
    </FluentCard>

    <!-- Recent Entries -->
    @if (recentEntries.Count > 0)
    {
        <FluentCard Style="flex: 1; overflow: hidden;">
            <FluentStack Orientation="Orientation.Vertical" Style="height: 100%;">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel Typo="Typography.H5">Recent Entries</FluentLabel>
                    <FluentButton Appearance="Appearance.Stealth" 
                                  Size="ButtonSize.Small"
                                  OnClick="ClearRecentEntries"
                                  Style="color: var(--neutral-foreground-rest);">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Style="margin-right: 4px;" />
                        Clear All
                    </FluentButton>
                </FluentStack>
                
                <div style="flex: 1; overflow-y: auto; margin-top: 12px;">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                        @foreach (var entry in recentEntries.OrderByDescending(e => e.CreatedUtc))
                        {
                            <FluentCard Style="padding: 12px; border: 1px solid var(--neutral-stroke-divider-rest);">
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12" VerticalAlignment="VerticalAlignment.Center">
                                        @if (entry.IsIncome)
                                        {
                                            <FluentIcon Value="@(new Icons.Filled.Size20.Money())" Style="color: var(--palette-green-foreground-1);" />
                                        }
                                        else
                                        {
                                            <FluentIcon Value="@(new Icons.Filled.Size20.ReceiptMoney())" Style="color: var(--palette-red-foreground-1);" />
                                        }
                                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="2">
                                            <FluentLabel Style="font-weight: 600;">@entry.Description</FluentLabel>
                                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                                                <FluentLabel Style="font-size: 12px; color: var(--neutral-foreground-rest);">
                                                    @entry.Date.ToString("MMM d")
                                                </FluentLabel>
                                                @if (!string.IsNullOrEmpty(entry.Category))
                                                {
                                                    <FluentBadge Appearance="Appearance.Neutral" Style="font-size: 10px;">
                                                        @entry.Category
                                                    </FluentBadge>
                                                }
                                            </FluentStack>
                                        </FluentStack>
                                    </FluentStack>
                                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8" VerticalAlignment="VerticalAlignment.Center">
                                        <FluentLabel Style="@($"{GetAmountStyle(entry)} font-weight: 600; font-size: 16px;")">
                                            @entry.FormattedAmount
                                        </FluentLabel>
                                        <FluentButton Appearance="Appearance.Stealth" 
                                                      Size="ButtonSize.Small"
                                                      OnClick="() => QuickCopyEntry(entry)"
                                                      Style="padding: 4px;"
                                                      Title="Copy this entry">
                                            <FluentIcon Value="@(new Icons.Regular.Size16.Copy())" />
                                        </FluentButton>
                                        <FluentButton Appearance="Appearance.Stealth" 
                                                      Size="ButtonSize.Small"
                                                      OnClick="() => RemoveRecentEntry(entry.Id)"
                                                      Style="color: var(--palette-red-foreground-1); padding: 4px;"
                                                      Title="Remove from list">
                                            <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" />
                                        </FluentButton>
                                    </FluentStack>
                                </FluentStack>
                            </FluentCard>
                        }
                    </FluentStack>
                </div>
            </FluentStack>
        </FluentCard>
    }

    <!-- Success Message -->
    @if (showSuccessMessage)
    {
        <FluentMessageBar Intent="MessageIntent.Success" 
                          Style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 300px;">
            <FluentIcon Value="@(new Icons.Filled.Size16.Checkmark())" Style="margin-right: 4px;" />
            <span>Transaction added successfully!</span>
        </FluentMessageBar>
    }
</FluentStack>

@code {
    private EntryModel currentEntry = new();
    private List<AdhocTransactionItem> recentEntries = new();
    private List<string> commonCategories = new();
    private decimal totalToday = 0;
    private bool isSubmitting = false;
    private bool showSuccessMessage = false;

    // References for keyboard navigation
    private FluentNumberField<decimal?> amountFieldRef = new();
    private FluentTextField descriptionFieldRef = new();
    private FluentTextField categoryFieldRef = new();

    protected override async Task OnInitializedAsync()
    {
        // Set today's date by default
        currentEntry.DateTime = DateTime.Today;
        
        // Load recent entries and calculate today's total
        await LoadRecentEntries();
        LoadCommonCategories();
        CalculateTodayTotal();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus the amount field on initial load - simplified approach
            try
            {
                await JS.InvokeVoidAsync("focusElement", "amount-field");
            }
            catch
            {
                // Focus failed, continue without error
            }
        }
    }

    private async Task LoadRecentEntries()
    {
        try
        {
            var today = DateOnly.FromDateTime(DateTime.Today);
            var startDate = today.AddDays(-7); // Last 7 days
            
            // Use the by-date-range endpoint with query parameters
            var response = await Http.GetAsync($"api/v1/adhoc-transactions/by-date-range?startDate={startDate:yyyy-MM-dd}&endDate={today:yyyy-MM-dd}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                
                // The by-date-range endpoint returns IEnumerable<AdhocTransactionResponse>, not PagedResult
                var transactions = JsonSerializer.Deserialize<List<AdhocTransactionResponse>>(json, options);
                
                if (transactions != null)
                {
                    // Convert to AdhocTransactionItem for UI
                    recentEntries = transactions.Select(t => new AdhocTransactionItem(
                        t.Id,
                        t.Description,
                        t.Currency,
                        t.Amount,
                        t.Date,
                        t.Category,
                        t.TransactionType,
                        t.CreatedUtc,
                        t.UpdatedUtc
                    )).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent entries: {ex.Message}");
        }
    }

    private void LoadCommonCategories()
    {
        // Extract categories from recent entries and find most common ones
        var categoryUsage = recentEntries
            .Where(e => !string.IsNullOrEmpty(e.Category))
            .GroupBy(e => e.Category!)
            .OrderByDescending(g => g.Count())
            .Take(8)
            .Select(g => g.Key)
            .ToList();

        commonCategories = categoryUsage;
    }

    private void CalculateTodayTotal()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        totalToday = recentEntries
            .Where(e => e.Date == today)
            .Sum(e => e.Amount);
    }

    private async Task AddTransaction()
    {
        if (!currentEntry.Validate(requireName: true))
        {
            StateHasChanged();
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var success = await CreateTransactionAsync();
            
            if (success)
            {
                // Show success message
                showSuccessMessage = true;
                StateHasChanged();
                
                // Hide success message after 2 seconds
                _ = Task.Delay(2000).ContinueWith(_ =>
                {
                    InvokeAsync(() =>
                    {
                        showSuccessMessage = false;
                        StateHasChanged();
                    });
                });

                // Reload recent entries and reset form
                await LoadRecentEntries();
                LoadCommonCategories();
                CalculateTodayTotal();
                ResetForm();
                
                // Focus back to amount field for next entry
                try
                {
                    await JS.InvokeVoidAsync("focusElement", "amount-field");
                }
                catch
                {
                    // Focus failed, continue without error
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task<bool> CreateTransactionAsync()
    {
        var createRequest = new
        {
            Description = currentEntry.Name!.Trim(),
            Currency = currentEntry.Currency,
            Amount = currentEntry.Amount!.Value,
            Date = DateOnly.FromDateTime(currentEntry.DateTime),
            Category = string.IsNullOrWhiteSpace(currentEntry.Category) ? null : currentEntry.Category.Trim()
        };

        var endpoint = currentEntry.TransactionType == TransactionType.Income 
            ? "api/v1/adhoc-transactions/income" 
            : "api/v1/adhoc-transactions/expenses";

        var response = await Http.PostAsJsonAsync(endpoint, createRequest);
        
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to create adhoc transaction: {response.StatusCode}");
        }
        
        return response.IsSuccessStatusCode;
    }

    private void ResetForm()
    {
        var preserveDate = currentEntry.DateTime;
        var preserveCategory = currentEntry.Category; // Keep category for rapid entry
        
        currentEntry = new EntryModel
        {
            DateTime = preserveDate,
            Category = preserveCategory,
            TransactionType = currentEntry.TransactionType // Keep transaction type too
        };
    }

    private void SetCategory(string category)
    {
        currentEntry.Category = category;
        StateHasChanged();
    }

    private void QuickCopyEntry(AdhocTransactionItem entry)
    {
        currentEntry.Name = entry.Description;
        currentEntry.Amount = entry.DisplayAmount;
        currentEntry.Category = entry.Category;
        currentEntry.TransactionType = entry.TransactionType;
        currentEntry.DateTime = DateTime.Today; // Use today's date
        StateHasChanged();
    }

    private void RemoveRecentEntry(Guid entryId)
    {
        recentEntries.RemoveAll(e => e.Id == entryId);
        CalculateTodayTotal();
        StateHasChanged();
    }

    private void ClearRecentEntries()
    {
        recentEntries.Clear();
        totalToday = 0;
        commonCategories.Clear();
        StateHasChanged();
    }

    private string GetAmountStyle(AdhocTransactionItem entry)
    {
        return entry.IsIncome 
            ? "color: var(--palette-green-foreground-1);" 
            : "color: var(--palette-red-foreground-1);";
    }

    // Keyboard navigation handlers - simplified for now
    private async Task HandleAmountKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            try
            {
                await JS.InvokeVoidAsync("focusElement", "description-field");
            }
            catch
            {
                // Focus failed, continue without error
            }
        }
    }

    private async Task HandleDescriptionKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTransaction();
        }
    }

    private async Task HandleCategoryKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTransaction();
        }
    }

    private async Task HandleDateKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTransaction();
        }
    }

    public class EntryModel
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal? Amount { get; set; }
        public DateTime DateTime { get; set; } = DateTime.Today;
        public string? Category { get; set; }
        public TransactionType TransactionType { get; set; } = TransactionType.Expense;

        public string TransactionTypeString
        {
            get => TransactionType.ToString();
            set => TransactionType = Enum.TryParse<TransactionType>(value, out var result) ? result : TransactionType.Expense;
        }

        public string DateString
        {
            get => DateTime.ToString("yyyy-MM-dd");
            set
            {
                if (System.DateTime.TryParse(value, out var result))
                {
                    DateTime = result;
                }
            }
        }

        public string? NameError { get; set; }
        public string? AmountError { get; set; }
        public string? DateError { get; set; }

        public bool HasErrors => NameError != null || AmountError != null || DateError != null;

        public void ClearErrors()
        {
            NameError = null;
            AmountError = null;
            DateError = null;
        }

        public bool Validate(bool requireName = true)
        {
            ClearErrors();

            if (requireName && string.IsNullOrWhiteSpace(Name))
                NameError = "Description is required";

            if (!Amount.HasValue || Amount <= 0)
                AmountError = "Amount must be greater than 0";

            if (DateTime == default)
                DateError = "Date is required";

            return !HasErrors;
        }
    }

    // AdhocTransactionResponse DTO to match API response
    public record AdhocTransactionResponse(
        Guid Id,
        string Description,
        string Currency,
        decimal Amount,
        DateOnly Date,
        string? Category,
        TransactionType TransactionType,
        DateTime CreatedUtc,
        DateTime? UpdatedUtc);
}