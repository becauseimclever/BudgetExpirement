@page "/fluent-bills"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Fluent Bills Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="padding: 24px; max-width: 1400px; margin: 0 auto;">
    <!-- Header -->
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" Style="margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
        <FluentLabel Typo="Typography.PageTitle" Style="color: var(--neutral-foreground-primary); font-weight: 600;">
            Fluent Bills Management
        </FluentLabel>
        <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary);">
            Manage your recurring bills with modern FluentUI components
        </FluentLabel>
    </FluentStack>

    @if (isLoading)
    {
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Style="padding: 48px;">
            <FluentProgressRing />
            <FluentLabel Typo="Typography.Body" Style="margin-left: 12px; color: var(--neutral-foreground-secondary);">
                Loading bills...
            </FluentLabel>
        </FluentStack>
    }
    else
    {
        <FluentCard Style="width: 100%; overflow: hidden;">
            <!-- Action Bar -->
            <FluentStack Orientation="Orientation.Horizontal" 
                         HorizontalAlignment="HorizontalAlignment.SpaceBetween" 
                         VerticalAlignment="VerticalAlignment.Center" 
                         Style="padding: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
                <FluentLabel Typo="Typography.H6">
                    Bills (@bills.Count)
                </FluentLabel>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="OpenAddDialog"
                              Style="margin-left: auto;">
                    ‚ûï Add New Bill
                </FluentButton>
            </FluentStack>

            <!-- Bills Data Grid -->
            <FluentDataGrid Items="@bills.AsQueryable()" Style="width: 100%;" GridTemplateColumns="3fr 1fr 1fr 1fr 140px">
                <PropertyColumn Property="@(c => c.Name)" Title="Bill Name" Sortable="true" />
                <TemplateColumn Title="Amount" Sortable="true">
                    <ChildContent Context="bill">
                        <FluentLabel Style="font-weight: 600; color: var(--palette-red-foreground-1);">
                            $@bill.Amount.ToString("N2")
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Due Date" Sortable="true">
                    <ChildContent Context="bill">
                        <FluentLabel>
                            @bill.Anchor.ToString("MMM dd, yyyy")
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Recurrence" Sortable="true">
                    @GetRecurrenceDisplayName(context.Recurrence)
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <ChildContent Context="bill">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                            <FluentButton Appearance="Appearance.Stealth" 
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => OpenEditDialog(bill))"
                                          Title="Edit bill">
                                ‚úèÔ∏è
                            </FluentButton>
                            <FluentButton Appearance="Appearance.Stealth" 
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => DeleteBill(bill))"
                                          Title="Delete bill"
                                          Style="color: var(--palette-red-foreground-1);">
                                üóëÔ∏è
                            </FluentButton>
                        </FluentStack>
                    </ChildContent>
                </TemplateColumn>
            </FluentDataGrid>

            @if (!bills.Any())
            {
                <FluentStack Orientation="Orientation.Vertical" 
                             HorizontalAlignment="HorizontalAlignment.Center" 
                             Style="padding: 48px; text-align: center;">
                    <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary); margin-bottom: 16px;">
                        No bills found. Add your first bill to get started.
                    </FluentLabel>
                    <FluentButton Appearance="Appearance.Accent" OnClick="OpenAddDialog">
                        ‚ûï Add Your First Bill
                    </FluentButton>
                </FluentStack>
            }
        </FluentCard>
    }
</FluentStack>

<!-- Add/Edit Bill Dialog -->
@if (showDialog)
{
    <FluentDialog Hidden="@(!showDialog)" 
                  Modal="true" 
                  Style="--dialog-width: 500px; --dialog-height: auto;">
        <FluentDialogHeader>
            <FluentLabel Typo="Typography.H4">
                @(dialogBill.IsEditMode ? "Edit Bill" : "Add New Bill")
            </FluentLabel>
        </FluentDialogHeader>

        <FluentDialogBody>
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                <!-- Bill Name -->
                <FluentTextField @bind-Value="dialogBill.Name"
                                 Label="Bill Name"
                                 Placeholder="Enter bill name..."
                                 Style="width: 100%;" />
                @if (!string.IsNullOrEmpty(dialogBill.NameError))
                {
                    <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                        @dialogBill.NameError
                    </FluentLabel>
                }

                <!-- Amount -->
                <FluentNumberField @bind-Value="dialogBill.Amount"
                                   Label="Amount ($)"
                                   Placeholder="0.00"
                                   Step="0.01m"
                                   Min="0"
                                   Style="width: 100%;" />
                @if (!string.IsNullOrEmpty(dialogBill.AmountError))
                {
                    <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                        @dialogBill.AmountError
                    </FluentLabel>
                }

                <!-- Due Date -->
                <div style="display: flex; flex-direction: column;">
                    <FluentLabel Style="margin-bottom: 4px;">Due Date</FluentLabel>
                    <input type="date" value="@dialogBill.AnchorDateString" 
                           @onchange="@((e) => dialogBill.AnchorDateString = e.Value?.ToString() ?? string.Empty)"
                           style="width: 100%; padding: 8px; border: 1px solid var(--neutral-stroke-control-default); border-radius: var(--control-corner-radius);" />
                </div>
                @if (!string.IsNullOrEmpty(dialogBill.AnchorError))
                {
                    <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                        @dialogBill.AnchorError
                    </FluentLabel>
                }

                <!-- Recurrence -->
                <FluentSelect TOption="string" 
                              @bind-Value="dialogBill.Recurrence"
                              Label="Recurrence"
                              Style="width: 100%;">
                    <FluentOption Value="Weekly">Weekly</FluentOption>
                    <FluentOption Value="BiWeekly">Bi-Weekly</FluentOption>
                    <FluentOption Value="Monthly">Monthly</FluentOption>
                    <FluentOption Value="Quarterly">Quarterly</FluentOption>
                    <FluentOption Value="SemiAnnual">Semi-Annual</FluentOption>
                    <FluentOption Value="Annual">Annual</FluentOption>
                </FluentSelect>
            </FluentStack>
        </FluentDialogBody>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Neutral" OnClick="CloseDialog">
                Cancel
            </FluentButton>
            <FluentButton Appearance="Appearance.Accent" 
                          OnClick="SaveBill"
                          Disabled="@dialogBill.IsSaving"
                          Style="margin-left: 8px;">
                @if (dialogBill.IsSaving)
                {
                    <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                }
                @(dialogBill.IsEditMode ? "Update Bill" : "Add Bill")
            </FluentButton>
        </FluentDialogFooter>
    </FluentDialog>
}

<!-- Toast Messages -->
@if (toastMessages.Count > 0)
{
    <FluentStack Orientation="Orientation.Vertical" Style="position: fixed; top: 16px; right: 16px; z-index: 1200;" VerticalGap="8">
        @foreach (var toast in toastMessages)
        {
            <FluentMessageBar Intent="@(toast.IsError ? MessageIntent.Error : MessageIntent.Success)" 
                              Style="min-width: 300px;">
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <span>@toast.Message</span>
                    <FluentButton Appearance="Appearance.Stealth" 
                                  Size="ButtonSize.Small"
                                  OnClick="@(() => RemoveToast(toast.Id))"
                                  Style="margin-left: 8px;">
                        ‚úñÔ∏è
                    </FluentButton>
                </div>
            </FluentMessageBar>
        }
    </FluentStack>
}

<style>
    .fluent-data-grid {
        border: 1px solid var(--neutral-stroke-control-default);
        border-radius: var(--control-corner-radius);
    }

    .fluent-data-grid-row:nth-child(even) {
        background-color: var(--neutral-layer-2);
    }

    .fluent-data-grid-row:hover {
        background-color: var(--neutral-layer-card-hover);
    }
</style>

@code {
    private List<BillScheduleItem> bills = new();
    private bool isLoading = true;
    private bool showDialog = false;
    private DialogBillModel dialogBill = new();
    private readonly List<ToastMessage> toastMessages = new();
    private int nextToastId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadBills();
    }

    private async Task LoadBills()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await Http.GetFromJsonAsync<PagedResult<BillScheduleItem>>("api/v1/billschedules?page=1&pageSize=100");
            if (result?.Items != null)
            {
                bills = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error loading bills: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenAddDialog()
    {
        dialogBill = new DialogBillModel
        {
            Currency = "USD",
            Recurrence = "Monthly",
            AnchorDateTime = DateTime.Today
        };
        showDialog = true;
        StateHasChanged();
    }

    private void OpenEditDialog(BillScheduleItem bill)
    {
        dialogBill = new DialogBillModel
        {
            Id = bill.Id,
            Name = bill.Name,
            Currency = bill.Currency,
            Amount = bill.Amount,
            Recurrence = GetRecurrenceDisplayName(bill.Recurrence),
            AnchorDateTime = bill.Anchor.ToDateTime(TimeOnly.MinValue),
            IsEditMode = true
        };
        showDialog = true;
        StateHasChanged();
    }

    private void CloseDialog()
    {
        showDialog = false;
        dialogBill = new DialogBillModel
        {
            Currency = "USD",
            Recurrence = "Monthly",
            AnchorDateTime = DateTime.Today
        };
        StateHasChanged();
    }

    private async Task SaveBill()
    {
        if (!ValidateDialogBill())
        {
            StateHasChanged();
            return;
        }

        dialogBill.IsSaving = true;
        StateHasChanged();

        try
        {
            if (dialogBill.IsEditMode && dialogBill.Id.HasValue)
            {
                // Update existing bill
                var recurrenceEnum = Enum.Parse<BillRecurrenceKind>(dialogBill.Recurrence!);
                var updateRequest = new UpdateBillScheduleRequest
                {
                    Name = dialogBill.Name!.Trim(),
                    Currency = "USD", // Always USD for now
                    Amount = dialogBill.Amount!.Value,
                    Anchor = DateOnly.FromDateTime(dialogBill.AnchorDateTime),
                    Recurrence = (int)recurrenceEnum
                };

                var response = await Http.PutAsJsonAsync($"api/v1/billschedules/{dialogBill.Id.Value}", updateRequest);
                
                if (response.IsSuccessStatusCode)
                {
                    ShowToast($"Bill '{updateRequest.Name}' updated successfully!", false);
                    CloseDialog();
                    await LoadBills();
                }
                else
                {
                    ShowToast($"Failed to update bill: {response.ReasonPhrase}", true);
                }
            }
            else
            {
                // Create new bill
                var recurrenceEnum = Enum.Parse<BillRecurrenceKind>(dialogBill.Recurrence!);
                var request = new CreateBillScheduleRequest
                {
                    Name = dialogBill.Name!.Trim(),
                    Currency = "USD", // Always USD for now
                    Amount = dialogBill.Amount!.Value,
                    Anchor = DateOnly.FromDateTime(dialogBill.AnchorDateTime),
                    Recurrence = (int)recurrenceEnum
                };

                var response = await Http.PostAsJsonAsync("api/v1/billschedules", request);
                
                if (response.IsSuccessStatusCode)
                {
                    ShowToast($"Bill '{request.Name}' created successfully!", false);
                    CloseDialog();
                    await LoadBills();
                }
                else
                {
                    ShowToast($"Failed to create bill: {response.ReasonPhrase}", true);
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error saving bill: {ex.Message}", true);
        }
        finally
        {
            dialogBill.IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteBill(BillScheduleItem bill)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/v1/billschedules/{bill.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast($"Bill '{bill.Name}' deleted successfully!", false);
                await LoadBills();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to delete bill: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting bill: {ex.Message}", true);
        }
    }

    private bool ValidateDialogBill()
    {
        dialogBill.ClearErrors();

        if (string.IsNullOrWhiteSpace(dialogBill.Name))
            dialogBill.NameError = "Bill name is required";

        if (!dialogBill.Amount.HasValue || dialogBill.Amount <= 0)
            dialogBill.AmountError = "Amount must be greater than 0";

        if (dialogBill.AnchorDateTime == default)
            dialogBill.AnchorError = "Due date is required";

        return !dialogBill.HasErrors;
    }

    private void ShowToast(string message, bool isError)
    {
        var toast = new ToastMessage(nextToastId++, message, isError);
        toastMessages.Add(toast);
        StateHasChanged();

        // Auto-remove toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                toastMessages.Remove(toast);
                StateHasChanged();
            });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toastMessages.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toastMessages.Remove(toast);
            StateHasChanged();
        }
    }

    private string GetRecurrenceDisplayName(BillRecurrenceKind recurrence)
    {
        return recurrence.ToString();
    }

    // Data Models
    private sealed class DialogBillModel
    {
        public Guid? Id { get; set; } // Null for new bills, populated for edits
        public bool IsEditMode { get; set; } = false;
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD"; // Always USD for now
        public decimal? Amount { get; set; }
        public DateTime AnchorDateTime { get; set; } = DateTime.Today;
        public string Recurrence { get; set; } = "Monthly";
        public bool IsSaving { get; set; }

        public string AnchorDateString
        {
            get => AnchorDateTime.ToString("yyyy-MM-dd");
            set
            {
                if (DateTime.TryParse(value, out var result))
                {
                    AnchorDateTime = result;
                }
            }
        }

        public string? NameError { get; set; }
        public string? AmountError { get; set; }
        public string? AnchorError { get; set; }

        public bool HasErrors => NameError != null || AmountError != null || AnchorError != null;

        public void ClearErrors()
        {
            NameError = null;
            AmountError = null;
            AnchorError = null;
        }
    }

    private sealed record ToastMessage(int Id, string Message, bool IsError);
    
    private sealed record BillScheduleItem(Guid Id, string Name, string Currency, decimal Amount, DateOnly Anchor, BillRecurrenceKind Recurrence, DateTime CreatedUtc, DateTime? UpdatedUtc);
    
    private enum BillRecurrenceKind 
    { 
        Weekly = 0, 
        BiWeekly = 1, 
        Monthly = 2, 
        Quarterly = 3, 
        SemiAnnual = 4, 
        Annual = 5 
    }

    private sealed record CreateMonthlyBillScheduleRequest
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public DateOnly Anchor { get; set; }
    }

    private sealed record CreateBillScheduleRequest
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public DateOnly Anchor { get; set; }
        public int Recurrence { get; set; }
    }

    private sealed record UpdateBillScheduleRequest
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public DateOnly Anchor { get; set; }
        public int Recurrence { get; set; }
    }

    private sealed class PagedResult<TItem>
    {
        public IReadOnlyList<TItem> Items { get; set; } = Array.Empty<TItem>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public long TotalCount { get; set; }
    }
}
