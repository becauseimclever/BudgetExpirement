@page "/bills"
@inject HttpClient Http
@inject IJSRuntime JS
@using BudgetExperiment.Client.Api
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Bills Management</PageTitle>

<div class="bills-management-container">
    <div class="bills-header">
        <h2>Bills Management</h2>
        <p class="text-muted">Manage your recurring bills. Use Tab to navigate quickly between fields.</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Loading bills...</span>
        </div>
    }
    else
    {
        <div class="bills-table-container">
            <div class="table-responsive">
                <table class="table table-hover bills-table">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 25%;">Bill Name</th>
                            <th style="width: 15%;">Currency</th>
                            <th style="width: 20%;">Amount</th>
                            <th style="width: 20%;">Due Date</th>
                            <th style="width: 20%;">Recurrence</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Existing bills *@
                        @foreach (var bill in bills)
                        {
                            <tr class="existing-bill">
                                <td>@bill.Name</td>
                                <td>@bill.Currency</td>
                                <td>@bill.Amount.ToString("C")</td>
                                <td>@bill.Anchor.ToString("MMM dd")</td>
                                <td>@bill.Recurrence</td>
                            </tr>
                        }
                        
                        @* New bill entry rows *@
                        @for (int i = 0; i < newBillRows.Count; i++)
                        {
                            var rowIndex = i; // Capture for lambda
                            var row = newBillRows[i];
                            <tr class="new-bill-row @(row.HasErrors ? "has-errors" : "")">
                                <td>
                                    <input type="text" 
                                           class="form-control form-control-sm @(row.NameError != null ? "is-invalid" : "")" 
                                           placeholder="Enter bill name..." 
                                           @bind="row.Name"
                                           @onkeydown="@(e => OnKeyDown(e, rowIndex, 0))"
                                           @onfocus="() => OnFocus(rowIndex)"
                                           tabindex="@(GetTabIndex(rowIndex, 0))" />
                                    @if (row.NameError != null)
                                    {
                                        <div class="invalid-feedback">@row.NameError</div>
                                    }
                                </td>
                                <td>
                                    <input type="text" 
                                           class="form-control form-control-sm @(row.CurrencyError != null ? "is-invalid" : "")" 
                                           placeholder="USD" 
                                           @bind="row.Currency"
                                           @onkeydown="@(e => OnKeyDown(e, rowIndex, 1))"
                                           @onfocus="() => OnFocus(rowIndex)"
                                           maxlength="3"
                                           tabindex="@(GetTabIndex(rowIndex, 1))" />
                                    @if (row.CurrencyError != null)
                                    {
                                        <div class="invalid-feedback">@row.CurrencyError</div>
                                    }
                                </td>
                                <td>
                                    <input type="number" 
                                           class="form-control form-control-sm @(row.AmountError != null ? "is-invalid" : "")" 
                                           placeholder="0.00" 
                                           step="0.01" 
                                           min="0"
                                           @bind="row.Amount"
                                           @onkeydown="@(e => OnKeyDown(e, rowIndex, 2))"
                                           @onfocus="() => OnFocus(rowIndex)"
                                           tabindex="@(GetTabIndex(rowIndex, 2))" />
                                    @if (row.AmountError != null)
                                    {
                                        <div class="invalid-feedback">@row.AmountError</div>
                                    }
                                </td>
                                <td>
                                    <input type="date" 
                                           class="form-control form-control-sm @(row.AnchorError != null ? "is-invalid" : "")" 
                                           @bind="row.Anchor"
                                           @onkeydown="@(e => OnKeyDown(e, rowIndex, 3))"
                                           @onfocus="() => OnFocus(rowIndex)"
                                           tabindex="@(GetTabIndex(rowIndex, 3))" />
                                    @if (row.AnchorError != null)
                                    {
                                        <div class="invalid-feedback">@row.AnchorError</div>
                                    }
                                </td>
                                <td>
                                    <select class="form-select form-select-sm" 
                                            @bind="row.Recurrence"
                                            @onkeydown="@(e => OnKeyDown(e, rowIndex, 4))"
                                            @onfocus="() => OnFocus(rowIndex)"
                                            tabindex="@(GetTabIndex(rowIndex, 4))">
                                        <option value="Monthly">Monthly</option>
                                    </select>
                                </td>
                                <td>
                                    @if (row.IsSaving)
                                    {
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Saving...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <button type="button" 
                                                class="btn btn-sm btn-success me-1" 
                                                @onclick="() => SaveBill(rowIndex)"
                                                disabled="@(!IsRowValid(row))"
                                                title="Save bill (Ctrl+Enter)">
                                            <i class="bi bi-check-lg"></i>
                                        </button>
                                        <button type="button" 
                                                class="btn btn-sm btn-outline-secondary" 
                                                @onclick="() => ClearRow(rowIndex)"
                                                title="Clear row (Esc)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                        
                        @* Add new row button *@
                        <tr class="add-row">
                            <td colspan="5" class="text-center">
                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddNewRow">
                                    <i class="bi bi-plus-lg"></i> Add New Bill
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@* Toast notifications *@
@if (toastMessages.Count > 0)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1200;">
        @foreach (var toast in toastMessages)
        {
            <div class="toast show" role="alert">
                <div class="toast-header">
                    <strong class="me-auto text-@(toast.IsError ? "danger" : "success")">
                        @(toast.IsError ? "Error" : "Success")
                    </strong>
                    <button type="button" class="btn-close" @onclick="() => RemoveToast(toast.Id)"></button>
                </div>
                <div class="toast-body">
                    @toast.Message
                </div>
            </div>
        }
    </div>
}

<style>
.bills-management-container {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.bills-header {
    margin-bottom: 2rem;
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 1rem;
}

.bills-header h2 {
    color: #2c3e50;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.loading-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    color: #6c757d;
}

.bills-table-container {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}

.bills-table {
    margin-bottom: 0;
}

.bills-table th {
    border-top: none;
    font-weight: 600;
    font-size: 0.9rem;
    color: #495057;
    padding: 1rem 0.75rem;
    background: #f8f9fa;
}

.bills-table td {
    padding: 0.75rem;
    vertical-align: middle;
    border-top: 1px solid #dee2e6;
}

.existing-bill {
    background: white;
}

.existing-bill:hover {
    background: #f8f9fa;
}

.new-bill-row {
    background: #f0f7ff;
    border-left: 4px solid #007bff;
}

.new-bill-row.has-errors {
    background: #fff5f5;
    border-left-color: #dc3545;
}

.new-bill-row input,
.new-bill-row select {
    border: 2px solid transparent;
    transition: all 0.2s ease;
}

.new-bill-row input:focus,
.new-bill-row select:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.new-bill-row input.is-invalid {
    border-color: #dc3545;
}

.new-bill-row input.is-invalid:focus {
    border-color: #dc3545;
    box-shadow: 0 0 0 0.2rem rgba(220,53,69,.25);
}

.add-row td {
    padding: 1.5rem;
    background: #f8f9fa;
    border-top: 2px dashed #dee2e6;
}

.btn-sm {
    font-size: 0.875rem;
    padding: 0.375rem 0.75rem;
}

.btn-outline-danger:hover {
    transform: translateY(-1px);
}

.invalid-feedback {
    display: block;
    font-size: 0.8rem;
    margin-top: 0.25rem;
}

/* Keyboard navigation hints */
.new-bill-row input:focus::before {
    content: "Tab to next field, Ctrl+Enter to save, Esc to clear";
    position: absolute;
    bottom: -2rem;
    left: 0;
    font-size: 0.75rem;
    color: #6c757d;
    background: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 1000;
}

@@media (max-width: 768px) {
    .bills-management-container {
        padding: 1rem;
    }
    
    .bills-table th,
    .bills-table td {
        padding: 0.5rem;
        font-size: 0.875rem;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }
}
</style>

@code {
    private List<BillScheduleItem> bills = new();
    private List<NewBillRow> newBillRows = new();
    private bool isLoading = true;
    private readonly List<ToastMessage> toastMessages = new();
    private int nextToastId = 1;
    private int currentFocusRow = -1;

    protected override async Task OnInitializedAsync()
    {
        await LoadBills();
        AddNewRow(); // Start with one empty row
    }

    private async Task LoadBills()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await Http.GetFromJsonAsync<PagedResult<BillScheduleItem>>("api/v1/billschedules?page=1&pageSize=100");
            if (result?.Items != null)
            {
                bills = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error loading bills: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewRow()
    {
        newBillRows.Add(new NewBillRow
        {
            Currency = "USD",
            Recurrence = "Monthly",
            Anchor = DateOnly.FromDateTime(DateTime.Today)
        });
        StateHasChanged();
    }

    private void EnsureEmptyRowAvailable()
    {
        // Check if we have any completely empty rows
        var hasEmptyRow = newBillRows.Any(row => 
            string.IsNullOrWhiteSpace(row.Name) && 
            row.Amount == null && 
            row.Anchor == DateOnly.FromDateTime(DateTime.Today));
            
        if (!hasEmptyRow)
        {
            AddNewRow();
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e, int rowIndex, int fieldIndex)
    {
        // Handle Ctrl+Enter to save
        if (e.CtrlKey && e.Key == "Enter")
        {
            await SaveBill(rowIndex);
            return;
        }

        // Handle Escape to clear
        if (e.Key == "Escape")
        {
            ClearRow(rowIndex);
            return;
        }

        // Handle Tab navigation (automatic browser behavior)
        // Handle Enter to move to next field or next row
        if (e.Key == "Enter")
        {
            await MoveToNextField(rowIndex, fieldIndex);
        }
    }

    private async Task MoveToNextField(int rowIndex, int fieldIndex)
    {
        if (fieldIndex < 4) // Move to next field in same row
        {
            var nextTabIndex = GetTabIndex(rowIndex, fieldIndex + 1);
            await JS.InvokeVoidAsync("focusElementByTabIndex", nextTabIndex);
        }
        else // Move to first field of next row or create new row
        {
            if (rowIndex == newBillRows.Count - 1) // Last row
            {
                EnsureEmptyRowAvailable();
                await Task.Delay(50); // Allow DOM to update
            }
            var nextRowIndex = Math.Min(rowIndex + 1, newBillRows.Count - 1);
            var nextRowFirstField = GetTabIndex(nextRowIndex, 0);
            await JS.InvokeVoidAsync("focusElementByTabIndex", nextRowFirstField);
        }
    }

    private void OnFocus(int rowIndex)
    {
        currentFocusRow = rowIndex;
    }

    private int GetTabIndex(int rowIndex, int fieldIndex)
    {
        return 100 + (rowIndex * 10) + fieldIndex;
    }

    private async Task SaveBill(int rowIndex)
    {
        var row = newBillRows[rowIndex];
        if (!ValidateRow(row))
        {
            StateHasChanged();
            return;
        }

        row.IsSaving = true;
        StateHasChanged();

        try
        {
            var request = new CreateMonthlyBillScheduleRequest
            {
                Name = row.Name!.Trim(),
                Currency = row.Currency!.ToUpperInvariant(),
                Amount = row.Amount!.Value,
                Anchor = row.Anchor!.Value
            };

            var response = await Http.PostAsJsonAsync("api/v1/billschedules/monthly", request);
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast($"Bill '{request.Name}' created successfully!", false);
                
                // Clear the row and reload bills
                ClearRow(rowIndex);
                await LoadBills();
                
                // Ensure we have at least one empty row available
                EnsureEmptyRowAvailable();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to create bill: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error creating bill: {ex.Message}", true);
        }
        finally
        {
            row.IsSaving = false;
            StateHasChanged();
        }
    }

    private void ClearRow(int rowIndex)
    {
        var row = newBillRows[rowIndex];
        row.Name = string.Empty;
        row.Currency = "USD";
        row.Amount = null;
        row.Anchor = DateOnly.FromDateTime(DateTime.Today);
        row.ClearErrors();
        StateHasChanged();
    }

    private bool IsRowValid(NewBillRow row)
    {
        return !string.IsNullOrWhiteSpace(row.Name) &&
               !string.IsNullOrWhiteSpace(row.Currency) &&
               row.Currency.Length == 3 &&
               row.Amount.HasValue &&
               row.Amount.Value > 0 &&
               row.Anchor.HasValue;
    }

    private bool ValidateRow(NewBillRow row)
    {
        row.ClearErrors();

        if (string.IsNullOrWhiteSpace(row.Name))
            row.NameError = "Bill name is required";

        if (string.IsNullOrWhiteSpace(row.Currency))
            row.CurrencyError = "Currency is required";
        else if (row.Currency.Length != 3)
            row.CurrencyError = "Currency must be 3 letters (e.g., USD)";

        if (!row.Amount.HasValue || row.Amount <= 0)
            row.AmountError = "Amount must be greater than 0";

        if (!row.Anchor.HasValue)
            row.AnchorError = "Due date is required";

        return !row.HasErrors;
    }

    private void ShowToast(string message, bool isError)
    {
        var toast = new ToastMessage(nextToastId++, message, isError);
        toastMessages.Add(toast);
        StateHasChanged();

        // Auto-remove toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                toastMessages.Remove(toast);
                StateHasChanged();
            });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toastMessages.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toastMessages.Remove(toast);
            StateHasChanged();
        }
    }

    private sealed class NewBillRow
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal? Amount { get; set; }
        public DateOnly? Anchor { get; set; }
        public string Recurrence { get; set; } = "Monthly";
        public bool IsSaving { get; set; }

        public string? NameError { get; set; }
        public string? CurrencyError { get; set; }
        public string? AmountError { get; set; }
        public string? AnchorError { get; set; }

        public bool HasErrors => NameError != null || CurrencyError != null || AmountError != null || AnchorError != null;

        public void ClearErrors()
        {
            NameError = null;
            CurrencyError = null;
            AmountError = null;
            AnchorError = null;
        }
    }

    private sealed record ToastMessage(int Id, string Message, bool IsError);
    
    private sealed record BillScheduleItem(Guid Id, string Name, string Currency, decimal Amount, DateOnly Anchor, BillRecurrenceKind Recurrence, DateTime CreatedUtc, DateTime? UpdatedUtc);
    
    private enum BillRecurrenceKind { Monthly }

    private sealed record CreateMonthlyBillScheduleRequest
    {
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public DateOnly Anchor { get; set; }
    }
}
