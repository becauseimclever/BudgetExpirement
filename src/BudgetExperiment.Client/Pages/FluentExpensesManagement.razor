@page "/fluent-expenses"
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Expenses Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Width="100%" Style="padding: 24px; max-width: 1400px; margin: 0 auto;">
    <!-- Header -->
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" Style="margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
        <FluentLabel Typo="Typography.PageTitle" Style="color: var(--neutral-foreground-primary); font-weight: 600;">
            Expenses Management
        </FluentLabel>
        <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary);">
            Track your expenses with modern FluentUI components
        </FluentLabel>
    </FluentStack>

    @if (isLoading)
    {
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Style="padding: 48px;">
            <FluentProgressRing />
            <FluentLabel Typo="Typography.Body" Style="margin-left: 12px; color: var(--neutral-foreground-secondary);">
                Loading expenses...
            </FluentLabel>
        </FluentStack>
    }
    else
    {
        <FluentCard Style="width: 100%; overflow: hidden;">
            <!-- Action Bar -->
            <FluentStack Orientation="Orientation.Horizontal" 
                         HorizontalAlignment="HorizontalAlignment.SpaceBetween" 
                         VerticalAlignment="VerticalAlignment.Center" 
                         Style="padding: 16px; border-bottom: 1px solid var(--neutral-stroke-divider);">
                <FluentLabel Typo="Typography.H6">
                    Expenses (@expenses.Count)
                </FluentLabel>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="OpenAddDialog"
                              Style="margin-left: auto;">
                    ‚ûï Add New Expense
                </FluentButton>
            </FluentStack>

            <!-- Expenses Data Grid -->
            <FluentDataGrid Items="@expenses.AsQueryable()" Style="width: 100%;" GridTemplateColumns="3fr 1fr 1fr 1fr 1fr 140px">
                <PropertyColumn Property="@(c => c.Description)" Title="Description" Sortable="true" />
                <TemplateColumn Title="Amount" Sortable="true">
                    <ChildContent Context="expense">
                        <FluentLabel Style="font-weight: 600; color: var(--palette-orange-foreground-1);">
                            $@expense.Amount.ToString("N2")
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Date" Sortable="true">
                    <ChildContent Context="expense">
                        <FluentLabel>
                            @expense.Date.ToString("MMM dd, yyyy")
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Category" Sortable="true">
                    <ChildContent Context="expense">
                        <FluentLabel>
                            @(expense.Category ?? "No Category")
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Currency" Sortable="true">
                    <ChildContent Context="expense">
                        <FluentLabel>
                            @expense.Currency
                        </FluentLabel>
                    </ChildContent>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <ChildContent Context="expense">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                            <FluentButton Appearance="Appearance.Stealth" 
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => OpenEditDialog(expense))"
                                          Title="Edit expense">
                                ‚úèÔ∏è
                            </FluentButton>
                            <FluentButton Appearance="Appearance.Stealth" 
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => DeleteExpense(expense))"
                                          Title="Delete expense"
                                          Style="color: var(--palette-red-foreground-1);">
                                üóëÔ∏è
                            </FluentButton>
                        </FluentStack>
                    </ChildContent>
                </TemplateColumn>
            </FluentDataGrid>

            @if (!expenses.Any())
            {
                <FluentStack Orientation="Orientation.Vertical" 
                             HorizontalAlignment="HorizontalAlignment.Center" 
                             Style="padding: 48px; text-align: center;">
                    <FluentLabel Typo="Typography.Body" Style="color: var(--neutral-foreground-secondary); margin-bottom: 16px;">
                        No expenses found. Add your first expense to get started.
                    </FluentLabel>
                    <FluentButton Appearance="Appearance.Accent" OnClick="OpenAddDialog">
                        ‚ûï Add Your First Expense
                    </FluentButton>
                </FluentStack>
            }
        </FluentCard>
    }
</FluentStack>

<!-- Add/Edit Expense Dialog -->
<FinancialItemDialog IsVisible="@showDialog"
                     Title="@(dialogExpense.IsEditMode ? "Edit Expense" : "Add New Expense")"
                     NameLabel="Description"
                     NamePlaceholder="Enter expense description..."
                     DateLabel="Expense Date"
                     SaveButtonText="@(dialogExpense.IsEditMode ? "Update Expense" : "Add Expense")"
                     ShowCategoryField="true"
                     ShowRecurrenceField="false"
                     Model="@dialogExpense"
                     OnCancel="CloseDialog"
                     OnSave="SaveExpense" />

<!-- Toast Messages -->
@if (toastMessages.Count > 0)
{
    <FluentStack Orientation="Orientation.Vertical" Style="position: fixed; top: 16px; right: 16px; z-index: 1200;" VerticalGap="8">
        @foreach (var toast in toastMessages)
        {
            <FluentMessageBar Intent="@(toast.IsError ? MessageIntent.Error : MessageIntent.Success)" 
                              Style="min-width: 300px;">
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <span>@toast.Message</span>
                    <FluentButton Appearance="Appearance.Stealth" 
                                  Size="ButtonSize.Small"
                                  OnClick="@(() => RemoveToast(toast.Id))"
                                  Style="margin-left: 8px;">
                        ‚úñÔ∏è
                    </FluentButton>
                </div>
            </FluentMessageBar>
        }
    </FluentStack>
}

<style>
    .fluent-data-grid {
        border: 1px solid var(--neutral-stroke-control-default);
        border-radius: var(--control-corner-radius);
    }

    .fluent-data-grid-row:nth-child(even) {
        background-color: var(--neutral-layer-2);
    }

    .fluent-data-grid-row:hover {
        background-color: var(--neutral-layer-card-hover);
    }
</style>

@code {
    private List<ExpenseItem> expenses = new();
    private bool isLoading = true;
    private bool showDialog = false;
    private FinancialItemDialog.FinancialItemDialogModel dialogExpense = new();
    private readonly List<ToastMessage> toastMessages = new();
    private int nextToastId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadExpenses();
    }

    private async Task LoadExpenses()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load expenses for the current month as an example
            var startDate = DateOnly.FromDateTime(DateTime.Today.AddDays(-30));
            var endDate = DateOnly.FromDateTime(DateTime.Today.AddDays(30));
            
            expenses = await Http.GetFromJsonAsync<List<ExpenseItem>>($"api/v1/expenses/by-date-range?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}") ?? new List<ExpenseItem>();
        }
        catch (Exception ex)
        {
            ShowToast($"Error loading expenses: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenAddDialog()
    {
        dialogExpense = new FinancialItemDialog.FinancialItemDialogModel
        {
            Currency = "USD",
            DateTime = DateTime.Today
        };
        showDialog = true;
        StateHasChanged();
    }

    private void OpenEditDialog(ExpenseItem expense)
    {
        dialogExpense = new FinancialItemDialog.FinancialItemDialogModel
        {
            Id = expense.Id,
            Name = expense.Description,
            Currency = expense.Currency,
            Amount = expense.Amount,
            DateTime = expense.Date.ToDateTime(TimeOnly.MinValue),
            Category = expense.Category,
            IsEditMode = true
        };
        showDialog = true;
        StateHasChanged();
    }

    private void CloseDialog()
    {
        showDialog = false;
        dialogExpense = new FinancialItemDialog.FinancialItemDialogModel
        {
            Currency = "USD",
            DateTime = DateTime.Today
        };
        StateHasChanged();
    }

    private async Task SaveExpense()
    {
        if (!dialogExpense.Validate(requireName: true))
        {
            StateHasChanged();
            return;
        }

        dialogExpense.IsSaving = true;
        StateHasChanged();

        try
        {
            if (dialogExpense.IsEditMode && dialogExpense.Id.HasValue)
            {
                // Update existing expense
                var updateRequest = new UpdateExpenseRequest
                {
                    Description = dialogExpense.Name!.Trim(),
                    Currency = dialogExpense.Currency,
                    Amount = dialogExpense.Amount!.Value,
                    Date = DateOnly.FromDateTime(dialogExpense.DateTime),
                    Category = string.IsNullOrWhiteSpace(dialogExpense.Category) ? null : dialogExpense.Category.Trim()
                };

                var response = await Http.PutAsJsonAsync($"api/v1/expenses/{dialogExpense.Id.Value}", updateRequest);
                
                if (response.IsSuccessStatusCode)
                {
                    ShowToast($"Expense '{updateRequest.Description}' updated successfully!", false);
                    CloseDialog();
                    await LoadExpenses();
                }
                else
                {
                    ShowToast($"Failed to update expense: {response.ReasonPhrase}", true);
                }
            }
            else
            {
                // Create new expense
                var request = new CreateExpenseRequest
                {
                    Description = dialogExpense.Name!.Trim(),
                    Currency = dialogExpense.Currency,
                    Amount = dialogExpense.Amount!.Value,
                    Date = DateOnly.FromDateTime(dialogExpense.DateTime),
                    Category = string.IsNullOrWhiteSpace(dialogExpense.Category) ? null : dialogExpense.Category.Trim()
                };

                var response = await Http.PostAsJsonAsync("api/v1/expenses", request);
                
                if (response.IsSuccessStatusCode)
                {
                    ShowToast($"Expense '{request.Description}' created successfully!", false);
                    CloseDialog();
                    await LoadExpenses();
                }
                else
                {
                    ShowToast($"Failed to create expense: {response.ReasonPhrase}", true);
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error saving expense: {ex.Message}", true);
        }
        finally
        {
            dialogExpense.IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteExpense(ExpenseItem expense)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/v1/expenses/{expense.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast($"Expense '{expense.Description}' deleted successfully!", false);
                await LoadExpenses();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowToast($"Failed to delete expense: {response.StatusCode}. {errorContent}", true);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting expense: {ex.Message}", true);
        }
    }

    private void ShowToast(string message, bool isError)
    {
        var toast = new ToastMessage(nextToastId++, message, isError);
        toastMessages.Add(toast);
        StateHasChanged();

        // Auto-remove toast after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                toastMessages.Remove(toast);
                StateHasChanged();
            });
        });
    }

    private void RemoveToast(int toastId)
    {
        var toast = toastMessages.FirstOrDefault(t => t.Id == toastId);
        if (toast != null)
        {
            toastMessages.Remove(toast);
            StateHasChanged();
        }
    }

    // Data Models
    private sealed record ToastMessage(int Id, string Message, bool IsError);
    
    private sealed record ExpenseItem(Guid Id, string Description, string Currency, decimal Amount, DateOnly Date, string? Category, DateTime CreatedUtc, DateTime? UpdatedUtc);

    private sealed record CreateExpenseRequest
    {
        public string Description { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal Amount { get; set; }
        public DateOnly Date { get; set; }
        public string? Category { get; set; }
    }

    private sealed record UpdateExpenseRequest
    {
        public string Description { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal Amount { get; set; }
        public DateOnly Date { get; set; }
        public string? Category { get; set; }
    }
}
