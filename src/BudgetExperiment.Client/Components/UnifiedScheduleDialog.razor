@inject IJSRuntime JS
@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Api

<FluentDialog Hidden="@(!IsVisible)" 
              Modal="true" 
              Style="--dialog-width: 500px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentLabel Typo="Typography.H4">
            @Title
        </FluentLabel>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
            <!-- Schedule Type Selection (only for new schedules) -->
            @if (!Model.IsEditMode)
            {
                <div style="display: flex; flex-direction: column;">
                    <FluentLabel Style="margin-bottom: 4px;">Schedule Type</FluentLabel>
                    <FluentSelect TOption="string" 
                                  Value="@Model.ScheduleType.ToString()"
                                  ValueChanged="@OnScheduleTypeChanged"
                                  Style="width: 100%;">
                        <FluentOption Value="@ScheduleType.Income.ToString()">Income</FluentOption>
                        <FluentOption Value="@ScheduleType.Expense.ToString()">Expense</FluentOption>
                    </FluentSelect>
                </div>
            }

            <!-- Name Field (required for expenses, optional for income) -->
            @if (Model.ScheduleType == ScheduleType.Expense || !string.IsNullOrEmpty(Model.Name))
            {
                <FluentTextField @bind-Value="Model.Name"
                                 Label="@GetNameLabel()"
                                 Placeholder="@GetNamePlaceholder()"
                                 Style="width: 100%;" />
                @if (!string.IsNullOrEmpty(Model.NameError))
                {
                    <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                        @Model.NameError
                    </FluentLabel>
                }
            }

            <!-- Amount -->
            <FluentNumberField @bind-Value="Model.Amount"
                               Label="Amount ($)"
                               Placeholder="0.00"
                               Step="0.01m"
                               Min="0"
                               Style="width: 100%;" />
            @if (!string.IsNullOrEmpty(Model.AmountError))
            {
                <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                    @Model.AmountError
                </FluentLabel>
            }

            <!-- Anchor Date -->
            <div style="display: flex; flex-direction: column;">
                <FluentLabel Style="margin-bottom: 4px;">@GetDateLabel()</FluentLabel>
                <input type="date" value="@Model.DateString" 
                       @onchange="@((e) => Model.DateString = e.Value?.ToString() ?? string.Empty)"
                       style="width: 100%; padding: 8px; border: 1px solid var(--neutral-stroke-control-default); border-radius: var(--control-corner-radius);" />
            </div>
            @if (!string.IsNullOrEmpty(Model.DateError))
            {
                <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                    @Model.DateError
                </FluentLabel>
            }

            <!-- Recurrence -->
            <div style="display: flex; flex-direction: column;">
                <FluentLabel Style="margin-bottom: 4px;">Recurrence</FluentLabel>
                <FluentSelect TOption="string" 
                              Value="@Model.Recurrence.ToString()"
                              ValueChanged="@OnRecurrenceChanged"
                              Style="width: 100%;">
                    <FluentOption Value="@RecurrencePattern.Weekly.ToString()">Weekly</FluentOption>
                    <FluentOption Value="@RecurrencePattern.BiWeekly.ToString()">Bi-Weekly</FluentOption>
                    <FluentOption Value="@RecurrencePattern.Monthly.ToString()">Monthly</FluentOption>
                    <FluentOption Value="@RecurrencePattern.Quarterly.ToString()">Quarterly</FluentOption>
                    <FluentOption Value="@RecurrencePattern.SemiAnnual.ToString()">Semi-Annual</FluentOption>
                    <FluentOption Value="@RecurrencePattern.Annual.ToString()">Annual</FluentOption>
                    <FluentOption Value="@RecurrencePattern.Custom.ToString()">Custom</FluentOption>
                </FluentSelect>
            </div>

            <!-- Days Interval (for custom recurrence) -->
            @if (Model.Recurrence == RecurrencePattern.Custom)
            {
                <FluentNumberField @bind-Value="Model.DaysInterval"
                                   Label="Days Interval"
                                   Placeholder="Enter number of days..."
                                   Min="1"
                                   Style="width: 100%;" />
                @if (!string.IsNullOrEmpty(Model.DaysIntervalError))
                {
                    <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                        @Model.DaysIntervalError
                    </FluentLabel>
                }
            }
        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" Style="width: 100%;">
            <!-- Delete button (only show in edit mode) -->
            <div>
                @if (Model.IsEditMode && OnDelete.HasDelegate)
                {
                    <FluentButton Appearance="Appearance.Stealth" 
                                  OnClick="HandleDelete"
                                  Disabled="@(Model.IsSaving || Model.IsDeleting)"
                                  Style="color: var(--palette-red-foreground-1);">
                        @if (Model.IsDeleting)
                        {
                            <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                        }
                        ??? Delete
                    </FluentButton>
                }
            </div>
            
            <!-- Cancel and Save buttons -->
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                <FluentButton Appearance="Appearance.Neutral" OnClick="OnCancel">
                    Cancel
                </FluentButton>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="OnSave"
                              Disabled="@(Model.IsSaving || Model.IsDeleting)"
                              Style="margin-left: 8px;">
                    @if (Model.IsSaving)
                    {
                        <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                    }
                    @GetSaveButtonText()
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public string Title { get; set; } = "Edit Recurring Schedule";
    [Parameter] public UnifiedScheduleDialogModel Model { get; set; } = new();
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    private string GetNameLabel() => Model.ScheduleType == ScheduleType.Expense ? "Expense Name" : "Income Name (Optional)";
    private string GetNamePlaceholder() => Model.ScheduleType == ScheduleType.Expense ? "Enter expense name..." : "Enter income name (optional)...";
    private string GetDateLabel() => Model.ScheduleType == ScheduleType.Expense ? "First Due Date" : "First Payment Date";
    private string GetSaveButtonText() => Model.IsEditMode 
        ? $"Update {(Model.ScheduleType == ScheduleType.Income ? "Income" : "Expense")}"
        : $"Add {(Model.ScheduleType == ScheduleType.Income ? "Income" : "Expense")}";

    private void OnScheduleTypeChanged(string value)
    {
        if (Enum.TryParse<ScheduleType>(value, out var scheduleType))
        {
            Model.ScheduleType = scheduleType;
        }
    }

    private void OnRecurrenceChanged(string value)
    {
        if (Enum.TryParse<RecurrencePattern>(value, out var recurrence))
        {
            Model.Recurrence = recurrence;
        }
    }

    public class UnifiedScheduleDialogModel
    {
        public Guid? Id { get; set; }
        public bool IsEditMode { get; set; } = false;
        public ScheduleType ScheduleType { get; set; } = ScheduleType.Income;
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal? Amount { get; set; }
        public DateTime DateTime { get; set; } = DateTime.Today;
        public RecurrencePattern Recurrence { get; set; } = RecurrencePattern.Monthly;
        public int? DaysInterval { get; set; }
        public bool IsSaving { get; set; }
        public bool IsDeleting { get; set; }

        public string DateString
        {
            get => DateTime.ToString("yyyy-MM-dd");
            set
            {
                if (System.DateTime.TryParse(value, out var result))
                {
                    DateTime = result;
                }
            }
        }

        public string? NameError { get; set; }
        public string? AmountError { get; set; }
        public string? DateError { get; set; }
        public string? DaysIntervalError { get; set; }

        public bool HasErrors => NameError != null || AmountError != null || DateError != null || DaysIntervalError != null;

        public void ClearErrors()
        {
            NameError = null;
            AmountError = null;
            DateError = null;
            DaysIntervalError = null;
        }

        public bool Validate()
        {
            ClearErrors();

            if (ScheduleType == ScheduleType.Expense && string.IsNullOrWhiteSpace(Name))
                NameError = "Expense name is required";

            if (!Amount.HasValue || Amount <= 0)
                AmountError = "Amount must be greater than 0";

            if (DateTime == default)
                DateError = "Date is required";

            if (Recurrence == RecurrencePattern.Custom && (!DaysInterval.HasValue || DaysInterval <= 0))
                DaysIntervalError = "Days interval must be greater than 0 for custom recurrence";

            return !HasErrors;
        }
    }

    private async Task HandleDelete()
    {
        if (OnDelete.HasDelegate)
        {
            var itemType = Model.ScheduleType == ScheduleType.Income ? "income schedule" : "expense schedule";
            var confirmMessage = $"Are you sure you want to delete this {itemType}?";
            
            var confirmed = await JS.InvokeAsync<bool>("confirm", confirmMessage);
            
            if (confirmed)
            {
                await OnDelete.InvokeAsync();
            }
        }
    }
}