@inject IJSRuntime JS
@using BudgetExperiment.Domain

<FluentDialog Hidden="@(!IsVisible)" 
              Modal="true" 
              Style="--dialog-width: 500px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentLabel Typo="Typography.H4">
            @Title
        </FluentLabel>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
            <!-- Transaction Type (only for adhoc transactions) -->
            @if (ShowTransactionTypeField)
            {
                <FluentRadioGroup @bind-Value="Model.TransactionTypeString"
                                  Label="Transaction Type"
                                  Style="width: 100%;">
                    <FluentRadio Value="@nameof(TransactionType.Income)">Income (+)</FluentRadio>
                    <FluentRadio Value="@nameof(TransactionType.Expense)">Expense (-)</FluentRadio>
                </FluentRadioGroup>
            }

            <!-- Name/Description Field -->
            <FluentTextField @bind-Value="Model.Name"
                             Label="@NameLabel"
                             Placeholder="@NamePlaceholder"
                             Style="width: 100%;" />
            @if (!string.IsNullOrEmpty(Model.NameError))
            {
                <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                    @Model.NameError
                </FluentLabel>
            }

            <!-- Amount -->
            <FluentNumberField @bind-Value="Model.Amount"
                               Label="Amount ($)"
                               Placeholder="0.00"
                               Step="0.01m"
                               Min="0"
                               Style="width: 100%;" />
            @if (!string.IsNullOrEmpty(Model.AmountError))
            {
                <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                    @Model.AmountError
                </FluentLabel>
            }

            <!-- Date -->
            <div style="display: flex; flex-direction: column;">
                <FluentLabel Style="margin-bottom: 4px;">@DateLabel</FluentLabel>
                <input type="date" value="@Model.DateString" 
                       @onchange="@((e) => Model.DateString = e.Value?.ToString() ?? string.Empty)"
                       style="width: 100%; padding: 8px; border: 1px solid var(--neutral-stroke-control-default); border-radius: var(--control-corner-radius);" />
            </div>
            @if (!string.IsNullOrEmpty(Model.DateError))
            {
                <FluentLabel Style="color: var(--palette-red-foreground-1); font-size: 12px;">
                    @Model.DateError
                </FluentLabel>
            }

            <!-- Category (optional for expenses and adhoc payments) -->
            @if (ShowCategoryField)
            {
                <FluentTextField @bind-Value="Model.Category"
                                 Label="Category"
                                 Placeholder="Optional category..."
                                 Style="width: 100%;" />
            }

            <!-- Recurrence (only for bills) -->
            @if (ShowRecurrenceField)
            {
                <FluentSelect TOption="string" 
                              @bind-Value="Model.Recurrence"
                              Label="Recurrence"
                              Style="width: 100%;">
                    @foreach (var option in RecurrenceOptions)
                    {
                        <FluentOption Value="@option">@option</FluentOption>
                    }
                </FluentSelect>
            }
        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" Style="width: 100%;">
            <!-- Delete button (only show in edit mode) -->
            <div>
                @if (Model.IsEditMode && OnDelete.HasDelegate)
                {
                    <FluentButton Appearance="Appearance.Stealth" 
                                  OnClick="HandleDelete"
                                  Disabled="@Model.IsSaving"
                                  Style="color: var(--palette-red-foreground-1);">
                        @if (Model.IsDeleting)
                        {
                            <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                        }
                        üóëÔ∏è Delete
                    </FluentButton>
                }
            </div>
            
            <!-- Cancel and Save buttons -->
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                <FluentButton Appearance="Appearance.Neutral" OnClick="OnCancel">
                    Cancel
                </FluentButton>
                <FluentButton Appearance="Appearance.Accent" 
                              OnClick="OnSave"
                              Disabled="@Model.IsSaving"
                              Style="margin-left: 8px;">
                    @if (Model.IsSaving)
                    {
                        <FluentProgressRing Style="width: 16px; height: 16px; margin-right: 8px;" />
                    }
                    @SaveButtonText
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public string Title { get; set; } = "Edit Item";
    [Parameter] public string NameLabel { get; set; } = "Name";
    [Parameter] public string NamePlaceholder { get; set; } = "Enter name...";
    [Parameter] public string DateLabel { get; set; } = "Date";
    [Parameter] public string SaveButtonText { get; set; } = "Save";
    [Parameter] public bool ShowCategoryField { get; set; } = false;
    [Parameter] public bool ShowRecurrenceField { get; set; } = false;
    [Parameter] public bool ShowTransactionTypeField { get; set; } = false;
    [Parameter] public List<string> RecurrenceOptions { get; set; } = new() { "Monthly" };
    [Parameter] public FinancialItemDialogModel Model { get; set; } = new();
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    public class FinancialItemDialogModel
    {
        public Guid? Id { get; set; }
        public bool IsEditMode { get; set; } = false;
        public string Name { get; set; } = string.Empty;
        public string Currency { get; set; } = "USD";
        public decimal? Amount { get; set; }
        public DateTime DateTime { get; set; } = DateTime.Today;
        public string? Category { get; set; }
        public string Recurrence { get; set; } = "Monthly";
        public TransactionType TransactionType { get; set; } = TransactionType.Expense;
        public bool IsSaving { get; set; }
        public bool IsDeleting { get; set; }

        public string TransactionTypeString
        {
            get => TransactionType.ToString();
            set => TransactionType = Enum.TryParse<TransactionType>(value, out var result) ? result : TransactionType.Expense;
        }

        public string DateString
        {
            get => DateTime.ToString("yyyy-MM-dd");
            set
            {
                if (System.DateTime.TryParse(value, out var result))
                {
                    DateTime = result;
                }
            }
        }

        public string? NameError { get; set; }
        public string? AmountError { get; set; }
        public string? DateError { get; set; }

        public bool HasErrors => NameError != null || AmountError != null || DateError != null;

        public void ClearErrors()
        {
            NameError = null;
            AmountError = null;
            DateError = null;
        }

        public bool Validate(bool requireName = true)
        {
            ClearErrors();

            if (requireName && string.IsNullOrWhiteSpace(Name))
                NameError = "Name is required";

            if (!Amount.HasValue || Amount <= 0)
                AmountError = "Amount must be greater than 0";

            if (DateTime == default)
                DateError = "Date is required";

            return !HasErrors;
        }
    }

    private async Task HandleDelete()
    {
        if (OnDelete.HasDelegate)
        {
            // Simple confirmation - you could enhance this with a proper confirmation dialog
            var itemType = Title?.ToLower().Contains("transaction") == true ? "transaction" : 
                          Title?.ToLower().Contains("payment") == true ? "payment" : "expense";
            var confirmMessage = $"Are you sure you want to delete this {itemType}?";
            
            // Note: This uses the browser's confirm dialog. For a more polished solution,
            // you could create a custom FluentUI confirmation dialog component
            var confirmed = await JS.InvokeAsync<bool>("confirm", confirmMessage);
            
            if (confirmed)
            {
                await OnDelete.InvokeAsync();
            }
        }
    }
}
