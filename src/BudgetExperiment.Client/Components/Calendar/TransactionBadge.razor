@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Api

@if (Schedule != null)
{
    <FluentCard Class="@GetScheduleCardClass()" 
                Title="@GetScheduleTooltip()"
                Style="margin: 1px; padding: 2px 6px; min-height: auto; cursor: pointer;"
                @onclick:stopPropagation="true">
        <div @onclick="() => OnEdit.InvokeAsync()">
            <FluentLabel Typo="Typography.Body" 
                         Class="@GetScheduleAmountLabelClass()"
                         Style="line-height: 1; margin: 0; font-size: 9px; font-weight: 600; white-space: nowrap;">
                @Schedule.FormattedAmount
            </FluentLabel>
        </div>
    </FluentCard>
}
else if (Transaction != null)
{
    <FluentCard Class="@GetTransactionCardClass()" 
                Title="@GetTransactionTooltip()"
                Style="margin: 1px; padding: 2px 6px; min-height: auto; cursor: pointer;"
                @onclick:stopPropagation="true">
        <div @onclick="() => OnEdit.InvokeAsync()">
            <FluentLabel Typo="Typography.Body" 
                         Class="@GetTransactionAmountLabelClass()"
                         Style="line-height: 1; margin: 0; font-size: 9px; font-weight: 600; white-space: nowrap;">
                @Transaction.FormattedAmount
            </FluentLabel>
        </div>
    </FluentCard>
}

<style>
    /* Use CSS variable fallbacks so badges display correctly even if theme vars are not defined */
    .income-schedule-card,
    .income-transaction-card {
        background-color: var(--palette-green-background-1, rgba(46,125,50,0.10)) !important;
        color: var(--palette-green-foreground-1, #2e7d32) !important;
        border-color: var(--palette-green-border-1, rgba(46,125,50,0.25)) !important;
        box-shadow: var(--elevation-shadow-tooltip, none) !important;
        min-width: auto !important;
        width: auto !important; /* Auto width instead of stretching */
        max-width: none !important;
        flex-shrink: 0 !important;
        flex-grow: 0 !important; /* Don't grow to fill space */
        min-height: 18px;
        max-height: 18px;
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        font-size: 9px !important;
    }

    .expense-schedule-card,
    .expense-transaction-card {
        background-color: var(--palette-red-background-1, rgba(198,40,40,0.10)) !important;
        color: var(--palette-red-foreground-1, #c62828) !important;
        border-color: var(--palette-red-border-1, rgba(198,40,40,0.25)) !important;
        box-shadow: var(--elevation-shadow-tooltip, none) !important;
        min-width: auto !important;
        width: auto !important; /* Auto width instead of stretching */
        max-width: none !important;
        flex-shrink: 0 !important;
        flex-grow: 0 !important; /* Don't grow to fill space */
        min-height: 18px;
        max-height: 18px;
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        font-size: 9px !important;
    }

    .income-schedule-amount-label,
    .income-transaction-amount-label {
        color: var(--palette-green-foreground-1, #2e7d32) !important;
        font-weight: 700 !important;
    }

    .expense-schedule-amount-label,
    .expense-transaction-amount-label {
        color: var(--palette-red-foreground-1, #c62828) !important;
        font-weight: 700 !important;
    }

    @@media (max-width: 768px) {
        .income-schedule-card,
        .expense-schedule-card,
        .income-transaction-card,
        .expense-transaction-card {
            font-size: 8px !important;
            padding: 1px 4px !important;
            min-height: 16px;
            max-height: 16px;
        }

        .income-schedule-amount-label,
        .expense-schedule-amount-label,
        .income-transaction-amount-label,
        .expense-transaction-amount-label {
            font-size: 8px !important;
            font-weight: 700 !important;
        }
    }
</style>

@code {
    [Parameter] public RecurringScheduleItem? Schedule { get; set; }
    [Parameter] public AdhocTransactionItem? Transaction { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }

    private string GetScheduleCardClass()
    {
        return Schedule?.IsIncome == true ? "income-schedule-card" : "expense-schedule-card";
    }

    private string GetScheduleAmountLabelClass()
    {
        return Schedule?.IsIncome == true ? "income-schedule-amount-label" : "expense-schedule-amount-label";
    }

    private string GetTransactionCardClass()
    {
        return Transaction?.IsIncome == true ? "income-transaction-card" : "expense-transaction-card";
    }

    private string GetTransactionAmountLabelClass()
    {
        return Transaction?.IsIncome == true ? "income-transaction-amount-label" : "expense-transaction-amount-label";
    }

    private string GetScheduleTooltip()
    {
        if (Schedule == null) return string.Empty;
        var typeText = Schedule.IsIncome ? "Income" : "Expense";
        return $"{Schedule.Recurrence} {typeText}: {Schedule.DisplayName} - {Schedule.Currency} ${Schedule.DisplayAmount:N2} (Anchor: {Schedule.Anchor:yyyy-MM-dd})";
    }

    private string GetTransactionTooltip()
    {
        if (Transaction == null) return string.Empty;
        var typeText = Transaction.IsIncome ? "Income" : "Expense";
        var categoryText = !string.IsNullOrEmpty(Transaction.Category) ? $" ({Transaction.Category})" : "";
        return $"{typeText}: {Transaction.Description}{categoryText} - {Transaction.Currency} ${Transaction.DisplayAmount:N2}";
    }
}