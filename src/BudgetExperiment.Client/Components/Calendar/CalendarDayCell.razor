@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Api
@using BudgetExperiment.Client.Components.Calendar

@if (Day == DateOnly.MinValue)
{
    <div class="calendar-cell empty-cell"></div>
}
else
{
    <div class="calendar-cell @GetDayCssClass()"
         @onclick="() => OnDayClick.InvokeAsync(Day)">
        <div style="height: 100%; display: flex; flex-direction: column;">
            <!-- Day content area -->
            <div style="flex: 1; padding: 8px; position: relative; min-height: 0;">
                <FluentLabel Typo="Typography.Body" 
                             Style="@GetDayNumberStyle()">
                    @Day.Day
                </FluentLabel>
                
                <!-- Schedule badges -->
                <div class="day-events" style="margin-top: 4px;">
                    @{
                        var allItems = new List<object>();
                        allItems.AddRange(RecurringSchedules.Cast<object>());
                        allItems.AddRange(AdhocTransactions.Cast<object>());
                        
                        const int maxVisibleItems = 4; // Increased since we have more height
                        var visibleItems = allItems.Take(maxVisibleItems).ToList();
                        var hiddenCount = Math.Max(0, allItems.Count - maxVisibleItems);
                    }
                    
                    <!-- Visible Schedule Items -->
                    @foreach (var item in visibleItems)
                    {
                        @if (item is RecurringScheduleItem schedule)
                        {
                            <TransactionBadge Schedule="@schedule" 
                                              OnEdit="() => OnEditSchedule.InvokeAsync(schedule)" />
                        }
                        else if (item is AdhocTransactionItem transaction)
                        {
                            <TransactionBadge Transaction="@transaction" 
                                              OnEdit="() => OnEditTransaction.InvokeAsync(transaction)" />
                        }
                    }
                    
                    <!-- More Items Indicator -->
                    @if (hiddenCount > 0)
                    {
                        <FluentCard Class="more-items-indicator" 
                                    Title="@($"Click to see all {allItems.Count} items for this day")"
                                    Style="margin: 1px; padding: 2px 6px; min-height: auto; cursor: pointer; background-color: var(--neutral-layer-3) !important; border: 1px dashed var(--neutral-stroke-control-default) !important;"
                                    @onclick:stopPropagation="true">
                            <div @onclick="@(() => OnDayClick.InvokeAsync(Day))">
                                <FluentLabel Typo="Typography.Body" 
                                             Style="line-height: 1; margin: 0; font-size: 9px; color: var(--neutral-foreground-secondary); white-space: nowrap;">
                                    +@hiddenCount more...
                                </FluentLabel>
                            </div>
                        </FluentCard>
                    }
                </div>
            </div>
            
            <!-- Running Total Banner -->
            @if (IsCurrentMonth)
            {
                <RunningTotalBanner RunningTotal="@RunningTotal" 
                                    Day="@Day" 
                                    DailyAmount="@DailyAmount"
                                    Tooltip="@RunningTotalTooltip" />
            }
        </div>
    </div>
}

<style>
    .calendar-cell {
        background-color: var(--neutral-layer-1);
        position: relative;
        transition: background-color var(--duration-fast-out) var(--curve-decelerate-mid);
        min-height: 110px; /* Increased from 80px */
        height: 110px; /* Increased from 80px */
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
        display: flex;
        flex-direction: column;
    }
    
    .calendar-cell:hover:not(.empty-cell) {
        background-color: var(--neutral-layer-2);
        cursor: pointer;
    }
    
    .calendar-cell.empty-cell {
        background-color: var(--neutral-layer-card);
        opacity: var(--disabled-opacity);
    }
    
    .calendar-cell.today {
        background-color: var(--accent-fill-rest);
        color: var(--accent-foreground-rest);
        border-color: var(--accent-stroke-control-default);
        box-shadow: inset 0 0 0 var(--stroke-width) var(--accent-stroke-control-default);
    }
    
    .calendar-cell.today:hover {
        background-color: var(--accent-fill-hover);
    }

    .calendar-cell.today .income-schedule-card,
    .calendar-cell.today .expense-schedule-card,
    .calendar-cell.today .income-transaction-card,
    .calendar-cell.today .expense-transaction-card {
        background-color: var(--neutral-layer-1) !important;
        color: var(--neutral-foreground-primary) !important;
        border-color: var(--neutral-stroke-control-default) !important;
    }
    
    .calendar-cell.other-month {
        opacity: 0.6;
    }
    
    .calendar-cell.event-day {
        border-left: calc(var(--stroke-width) * 4) solid var(--palette-blue-foreground-1);
    }
    
    .calendar-cell.event-day:not(.today) {
        background-color: var(--palette-blue-tint-60);
    }
    
    .calendar-cell.event-day:hover:not(.today) {
        background-color: var(--palette-blue-tint-50);
    }
    
    .day-events {
        display: flex;
        flex-direction: row; /* Changed from column to row */
        flex-wrap: wrap; /* Allow wrapping to next line */
        gap: 2px; /* Small gap between items */
        align-items: flex-start; /* Align items to top */
        justify-content: flex-start; /* Align items to left */
        width: 100%;
        max-height: calc(100% - 30px); /* Reserve space for date number */
        overflow: hidden;
    }

    .more-items-indicator {
        background-color: var(--neutral-layer-3) !important;
        color: var(--neutral-foreground-secondary) !important;
        border: 1px dashed var(--neutral-stroke-control-default) !important;
        box-shadow: none !important;
        font-size: 9px !important;
        min-width: auto !important;
        width: auto !important; /* Auto width instead of stretching */
        max-width: none !important;
        flex-shrink: 0 !important;
        flex-grow: 0 !important; /* Don't grow to fill space */
        min-height: 18px;
        max-height: 18px;
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }
    
    .more-items-indicator:hover {
        opacity: 1;
        background-color: var(--neutral-layer-4) !important;
    }

    @@media (max-width: 768px) {
        .calendar-cell {
            min-height: 90px; /* Increased from 60px */
            height: 90px;
        }

        .day-events {
            max-height: calc(100% - 25px); /* Less space for date number on mobile */
        }
    }
</style>

@code {
    [Parameter] public DateOnly Day { get; set; }
    [Parameter] public bool IsToday { get; set; }
    [Parameter] public bool IsCurrentMonth { get; set; }
    [Parameter] public bool HasEvents { get; set; }
    [Parameter] public decimal RunningTotal { get; set; }
    [Parameter] public decimal DailyAmount { get; set; }
    [Parameter] public string RunningTotalTooltip { get; set; } = string.Empty;
    [Parameter] public List<RecurringScheduleItem> RecurringSchedules { get; set; } = new();
    [Parameter] public List<AdhocTransactionItem> AdhocTransactions { get; set; } = new();
    [Parameter] public EventCallback<DateOnly> OnDayClick { get; set; }
    [Parameter] public EventCallback<RecurringScheduleItem> OnEditSchedule { get; set; }
    [Parameter] public EventCallback<AdhocTransactionItem> OnEditTransaction { get; set; }

    private string GetDayCssClass()
    {
        var classes = new List<string> { "calendar-day" };
        
        if (IsToday) 
            classes.Add("today");
        if (!IsCurrentMonth) 
            classes.Add("other-month");
        if (HasEvents)
            classes.Add("event-day");
        
        return string.Join(" ", classes);
    }

    private string GetDayNumberStyle()
    {
        if (IsToday)
            return "color: var(--accent-foreground-rest); font-weight: bold;";
        if (!IsCurrentMonth)
            return "color: var(--neutral-foreground-secondary);";
        
        return "color: var(--neutral-foreground-primary);";
    }
}