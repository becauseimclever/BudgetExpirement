@using Microsoft.FluentUI.AspNetCore.Components
@using BudgetExperiment.Client.Components.Calendar
@using BudgetExperiment.Client.Models
@using BudgetExperiment.Client.Api
@using BudgetExperiment.Client.Services

<div class="fluent-calendar-container">
    <div class="calendar-grid">
        <!-- Day Headers -->
        @foreach (var dayName in WeekDayHeaders)
        {
            <div class="calendar-header-cell">
                <FluentLabel Typo="Typography.Body">
                    @dayName
                </FluentLabel>
            </div>
        }
        
        <!-- Calendar Days -->
        @foreach (var week in CurrentMonth.Weeks)
        {
            @foreach (var day in week)
            {
                var isToday = day == DateOnly.FromDateTime(DateTime.Today);
                var isCurrentMonth = day.Month == CurrentMonth.Month;
                var recurringSchedulesForDay = DataService.GetRecurringSchedulesForDay(day, CurrentMonthKey);
                var adhocTransactionsForDay = DataService.GetAdhocTransactionsForDay(day, CurrentMonthKey);
                var hasEvents = recurringSchedulesForDay.Any() || adhocTransactionsForDay.Any();
                var runningTotal = DataService.GetRunningTotalForDay(day, CurrentMonthKey);
                var dailyAmount = DataService.GetDailyAmountForDay(day, CurrentMonthKey);
                var runningTotalTooltip = DataService.GetRunningTotalTooltip(day, runningTotal, CurrentMonthKey);
                
                <CalendarDayCell Day="@day"
                                 IsToday="@isToday"
                                 IsCurrentMonth="@isCurrentMonth"
                                 HasEvents="@hasEvents"
                                 RunningTotal="@runningTotal"
                                 DailyAmount="@dailyAmount"
                                 RunningTotalTooltip="@runningTotalTooltip"
                                 RecurringSchedules="@recurringSchedulesForDay"
                                 AdhocTransactions="@adhocTransactionsForDay"
                                 OnDayClick="OnDayClick"
                                 OnEditSchedule="OnEditSchedule"
                                 OnEditTransaction="OnEditTransaction" />
            }
        }
    </div>
</div>

<style>
    .fluent-calendar-container {
        height: calc(100vh - 200px);
        min-height: 500px;
        overflow: hidden;
        padding: var(--design-unit-4);
    }
    
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: auto repeat(6, minmax(110px, 1fr)); /* Increased from 80px to 110px */
        height: 100%;
        min-height: 680px; /* Increased from 480px to accommodate taller cells */
        gap: var(--stroke-width);
        background-color: var(--neutral-stroke-divider);
        border-radius: var(--control-corner-radius);
        overflow: hidden;
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
    }
    
    .calendar-header-cell {
        background-color: var(--neutral-layer-2);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--design-unit-4) var(--design-unit-2);
        min-height: 48px;
        height: 48px;
        color: var(--neutral-foreground-primary);
        font-weight: var(--font-weight-semibold);
        border: var(--stroke-width) solid var(--neutral-stroke-control-default);
    }

    @@media (max-width: 768px) {
        .fluent-calendar-container {
            padding: var(--design-unit-2);
        }
        
        .calendar-grid {
            grid-template-rows: auto repeat(6, minmax(90px, 1fr)); /* Increased from 60px to 90px */
            min-height: 580px; /* Increased for mobile */
        }
        
        .calendar-header-cell {
            padding: var(--design-unit-2) var(--design-unit-1);
            min-height: 32px;
        }
    }
</style>

@code {
    private readonly string[] WeekDayHeaders = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    [Parameter] public CalendarMonth CurrentMonth { get; set; } = new();
    [Parameter] public string CurrentMonthKey { get; set; } = string.Empty;
    [Parameter] public CalendarDataService DataService { get; set; } = null!;
    [Parameter] public EventCallback<DateOnly> OnDayClick { get; set; }
    [Parameter] public EventCallback<RecurringScheduleItem> OnEditSchedule { get; set; }
    [Parameter] public EventCallback<AdhocTransactionItem> OnEditTransaction { get; set; }
}